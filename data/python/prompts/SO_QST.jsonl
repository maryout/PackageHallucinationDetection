{"id": 0, "Title": "What does the &quot;yield&quot; keyword do in Python?", "Body": "<p>What functionality does the <a href=\"https://docs.python.org/3/reference/simple_stmts.html#yield\" rel=\"noreferrer\"><code>yield</code></a> keyword in Python provide?</p>\n<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>\n<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild  \n</code></pre>\n<p>And this is the caller:</p>\n<pre><code>result, candidates = [], [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n</code></pre>\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr />\n<sub>\n1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"https://well-adjusted.de/~jrspieker/mspace/\" rel=\"noreferrer\">Module mspace</a>.</sub> \n"}
{"id": 1, "Title": "What does if __name__ == &quot;__main__&quot;: do?", "Body": "<p>What does this do, and why should one include the <code>if</code> statement?</p>\n<pre class=\"lang-py prettyprint-override\"><code>if __name__ == &quot;__main__&quot;:\n    print(&quot;Hello, World!&quot;)\n</code></pre>\n<hr />\n<p><sub>If you are trying to close a question where someone should be using this idiom and isn't, consider closing as a duplicate of <a href=\"https://stackoverflow.com/questions/6523791\">Why is Python running my module when I import it, and how do I stop it?</a> instead. For questions where someone simply hasn't called any functions, or incorrectly expects a function named <code>main</code> to be used as an entry point automatically, use <a href=\"https://stackoverflow.com/questions/17257631\">Why doesn&#39;t the main() function run when I start a Python script? Where does the script start running?</a>.</sub></p>\n"}
{"id": 2, "Title": "Does Python have a ternary conditional operator?", "Body": "<p>Is there a <a href=\"https://en.wikipedia.org/wiki/%3F:#Python\" rel=\"noreferrer\">ternary conditional operator</a> in Python?</p>\n"}
{"id": 3, "Title": "What are metaclasses in Python?", "Body": "<p>What are <a href=\"https://docs.python.org/3/reference/datamodel.html#metaclasses\" rel=\"noreferrer\">metaclasses</a>? What are they used for?</p>\n"}
{"id": 4, "Title": "How do I check whether a file exists without exceptions?", "Body": "<p>How do I check whether a file exists or not, without using the <a href=\"https://docs.python.org/3.6/reference/compound_stmts.html#try\" rel=\"noreferrer\"><code>try</code></a> statement?</p>\n"}
{"id": 5, "Title": "How do I merge two dictionaries in a single expression in Python?", "Body": "<p>I want to merge two dictionaries into a new dictionary.</p>\n<pre><code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\nz = merge(x, y)\n\n&gt;&gt;&gt; z\n{'a': 1, 'b': 3, 'c': 4}\n</code></pre>\n<p>Whenever a key <code>k</code> is present in both dictionaries, only the value <code>y[k]</code> should be kept.</p>\n"}
{"id": 6, "Title": "How do I execute a program or call a system command?", "Body": "<p>How do I call an external command within Python as if I had typed it in a shell or command prompt?</p>\n"}
{"id": 7, "Title": "How do I create a directory, and any missing parent directories?", "Body": "<p>How do I create a directory at a given path, and also create any missing parent directories along that path? For example, the Bash command <code>mkdir -p /path/to/nested/directory</code> does this.</p>\n"}
{"id": 8, "Title": "How can I access the index value in a &#39;for&#39; loop?", "Body": "<p>How do I access the index while iterating over a sequence with a <code>for</code> loop?</p>\n<pre class=\"lang-py prettyprint-override\"><code>xs = [8, 23, 45]\n\nfor x in xs:\n    print(&quot;item #{} = {}&quot;.format(index, x))\n</code></pre>\n<p>Desired output:</p>\n<pre class=\"lang-none prettyprint-override\"><code>item #1 = 8\nitem #2 = 23\nitem #3 = 45\n</code></pre>\n"}
{"id": 9, "Title": "How do I make a flat list out of a list of lists?", "Body": "<p>I have a list of lists like</p>\n<pre><code>[\n    [1, 2, 3],\n    [4, 5, 6],\n    [7],\n    [8, 9]\n]\n</code></pre>\n<p>How can I flatten it to get <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>?</p>\n<hr />\n<p><sub>If your list of lists comes from a nested list comprehension, the problem can be solved more simply/directly by fixing the comprehension; please see <a href=\"https://stackoverflow.com/questions/1077015\">How can I get a flat result from a list comprehension instead of a nested list?</a>.</sub></p>\n<p><sub>The most popular solutions here generally only flatten one &quot;level&quot; of the nested list. See <a href=\"https://stackoverflow.com/questions/2158395\">Flatten an irregular (arbitrarily nested) list of lists</a> for solutions that completely flatten a deeply nested structure (recursively, in general).</sub></p>\n"}
{"id": 10, "Title": "What is the difference between @staticmethod and @classmethod in Python?", "Body": "<p>What is the difference between a method <a href=\"https://peps.python.org/pep-0318/\" rel=\"noreferrer\">decorated</a> with <a href=\"http://docs.python.org/library/functions.html#staticmethod\" rel=\"noreferrer\"><code>@staticmethod</code></a> and one decorated with <a href=\"http://docs.python.org/library/functions.html#classmethod\" rel=\"noreferrer\"><code>@classmethod</code></a>?</p>\n"}
{"id": 11, "Title": "How slicing in Python works", "Body": "<p>How does Python's <em>slice notation</em> work? That is: when I write code like <code>a[x:y:z]</code>, <code>a[:]</code>, <code>a[::2]</code> etc., how can I understand which elements end up in the slice?</p>\n<hr />\n<p><sub>See <a href=\"https://stackoverflow.com/questions/11364533\">Why are slice and range upper-bound exclusive?</a> to learn why <code>xs[0:2] == [xs[0], xs[1]]</code>, <em>not</em> <code>[..., xs[2]]</code>.</sub><br />\n<sub>See <a href=\"https://stackoverflow.com/questions/1403674/\">Make a new list containing every Nth item in the original list</a> for <code>xs[::N]</code>.</sub><br />\n<sub>See <a href=\"https://stackoverflow.com/questions/10623302\">How does assignment work with list slices?</a> to learn what <code>xs[0:2] = [&quot;a&quot;, &quot;b&quot;]</code> does.</sub></p>\n"}
{"id": 12, "Title": "How can I find the index for a given item in a list?", "Body": "<p>Given a list <code>[&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;]</code> and an item in the list <code>&quot;bar&quot;</code>, how do I get its index <code>1</code>?</p>\n"}
{"id": 13, "Title": "Iterating over dictionaries using &#39;for&#39; loops", "Body": "<pre class=\"lang-py prettyprint-override\"><code>d = {'x': 1, 'y': 2, 'z': 3}\n\nfor key in d:\n    print(key, 'corresponds to', d[key])\n</code></pre>\n<p>How does Python recognize that it needs only to read the <code>key</code> from the dictionary? Is <code>key</code> a special keyword, or is it simply a variable?</p>\n"}
{"id": 14, "Title": "How can I iterate over rows in a Pandas DataFrame?", "Body": "<p>I have a pandas dataframe, <code>df</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>   c1   c2\n0  10  100\n1  11  110\n2  12  120\n</code></pre>\n<p>How do I iterate over the rows of this dataframe? For every row, I want to access its elements (values in cells) by the name of the columns. For example:</p>\n<pre class=\"lang-py prettyprint-override\"><code>for row in df.rows:\n    print(row['c1'], row['c2'])\n</code></pre>\n<hr />\n<p>I found a <a href=\"https://stackoverflow.com/questions/7837722/what-is-the-most-efficient-way-to-loop-through-dataframes-with-pandas\">similar question</a>, which suggests using either of these:</p>\n<ul>\n<li>\n<pre class=\"lang-py prettyprint-override\"><code>for date, row in df.T.iteritems():\n</code></pre>\n</li>\n<li>\n<pre class=\"lang-py prettyprint-override\"><code>for row in df.iterrows():\n</code></pre>\n</li>\n</ul>\n<p>But I do not understand what the <code>row</code> object is and how I can work with it.</p>\n"}
{"id": 15, "Title": "How can I use a global variable in a function?", "Body": "<p>How do I create or use a global variable inside a function?</p>\n<p>How do I use a global variable that was defined in one function inside other functions?</p>\n<hr />\n<p><sub>Failing to use the <code>global</code> keyword where appropriate often causes <code>UnboundLocalError</code>. The precise rules for this are explained at <a href=\"https://stackoverflow.com/questions/370357\">UnboundLocalError on local variable when reassigned after first use</a>. Generally, please close other questions as a duplicate of <em>that</em> question when an explanation is sought, and <em>this</em> question when someone simply needs to know the <code>global</code> keyword.</sub></p>\n"}
{"id": 16, "Title": "How do I get the current time in Python?", "Body": "<p>How do I get the current time in Python?</p>\n"}
{"id": 17, "Title": "How can I catch multiple exceptions in one line? (in the &quot;except&quot; block)", "Body": "<p>I know that I can do:</p>\n<pre><code>try:\n    # do something that may fail\nexcept:\n    # do this if ANYTHING goes wrong\n</code></pre>\n<p>I can also do this:</p>\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException:\n    # say please\nexcept YouAreTooShortException:\n    # stand on a ladder\n</code></pre>\n<p>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</p>\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException:\n    # say please\nexcept YouAreBeingMeanException:\n    # say please\n</code></pre>\n<p>Is there a way that I can do something like this (since the action to take in both exceptions is to <code>say please</code>):</p>\n<pre><code>try:\n    # do something that may fail\nexcept IDontLikeYouException, YouAreBeingMeanException:\n    # say please\n</code></pre>\n<p>Now this really won't work, as it matches the syntax for:</p>\n<pre><code>try:\n    # do something that may fail\nexcept Exception, e:\n    # say please\n</code></pre>\n<p>So, my effort to catch the two distinct exceptions doesn't exactly come through.</p>\n<p>Is there a way to do this?</p>\n"}
{"id": 18, "Title": "How do I copy a file?", "Body": "<p>How do I copy a file in Python?</p>\n"}
{"id": 19, "Title": "What is __init__.py for?", "Body": "<p>What is <a href=\"https://docs.python.org/3/tutorial/modules.html#packages\" rel=\"noreferrer\"><code>__init__.py</code></a> for in a Python source directory?</p>\n"}
{"id": 20, "Title": "Convert bytes to a string in Python 3", "Body": "<p>I captured the standard output of an external program into a <code>bytes</code> object:</p>\n<pre><code>&gt;&gt;&gt; from subprocess import *\n&gt;&gt;&gt; stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]\n&gt;&gt;&gt; stdout\nb'total 0\\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\\n'\n</code></pre>\n<p>I want to convert that to a normal Python string, so that I can print it like this:</p>\n<pre><code>&gt;&gt;&gt; print(stdout)\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n</code></pre>\n<p>How do I convert the <code>bytes</code> object to a <code>str</code> with Python 3?</p>\n<hr />\n<p><sub>See <a href=\"https://stackoverflow.com/questions/7585435\">Best way to convert string to bytes in Python 3?</a> for the other way around.</sub></p>\n"}
{"id": 21, "Title": "What is the difference between __str__ and __repr__?", "Body": "<p>What is the difference between <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__str__\" rel=\"noreferrer\"><code>__str__</code></a> and <a href=\"https://docs.python.org/3/reference/datamodel.html#object.__repr__\" rel=\"noreferrer\"><code>__repr__</code></a> in Python?</p>\n"}
{"id": 22, "Title": "How do I select rows from a DataFrame based on column values?", "Body": "<p>How can I select rows from a DataFrame based on values in some column in Pandas?</p>\n<p>In SQL, I would use:</p>\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT *\nFROM table\nWHERE column_name = some_value\n</code></pre>\n"}
{"id": 23, "Title": "How can I add new keys to a dictionary?", "Body": "<p>How do I add a new key to an existing dictionary? It doesn't have an <code>.add()</code> method.</p>\n"}
{"id": 24, "Title": "Does Python have a string &#39;contains&#39; substring method?", "Body": "<p>I'm looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>\n\n<p>I want to do:</p>\n\n<pre><code>if not somestring.contains(\"blah\"):\n   continue\n</code></pre>\n"}
{"id": 25, "Title": "How can I delete a file or folder in Python?", "Body": "<p>How can I delete a file or folder in Python?</p>\n"}
{"id": 26, "Title": "&quot;Least Astonishment&quot; and the Mutable Default Argument", "Body": "<pre><code>def foo(a=[]):\n    a.append(5)\n    return a\n</code></pre>\n<p>Python novices expect this function called with no parameter to always return a list with only one element: <code>[5]</code>. The result is  different and astonishing:</p>\n<pre><code>&gt;&gt;&gt; foo()\n[5]\n&gt;&gt;&gt; foo()\n[5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5, 5]\n&gt;&gt;&gt; foo()\n</code></pre>\n<p>The behavior has an underlying explanation, but it is unexpected if you don't understand internals. What is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)</p>\n<p><strong>Edit</strong>:</p>\n<p><a href=\"https://stackoverflow.com/a/1137164/7487335\">Baczek made an interesting example</a>. Together with your comments and <a href=\"https://stackoverflow.com/a/1134623/7487335\">Utaal's in particular</a>, I elaborated:</p>\n<pre><code>def a():\n    print(&quot;a executed&quot;)\n    return []\n\n           \ndef b(x=a()):\n    x.append(5)\n    print(x)\n\na executed\n&gt;&gt;&gt; b()\n[5]\n&gt;&gt;&gt; b()\n[5, 5]\n</code></pre>\n<p>It seems that the design decision was relative to where to put the scope of parameters: inside the function, or &quot;together&quot; with it?</p>\n<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be &quot;hybrid&quot; in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>\n<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>\n"}
{"id": 27, "Title": "What does ** (double star/asterisk) and * (star/asterisk) do for parameters?", "Body": "<p>What do <code>*args</code> and <code>**kwargs</code> mean in these function definitions?</p>\n<pre><code>def foo(x, y, *args):\n    pass\n\ndef bar(x, y, **kwargs):\n    pass\n</code></pre>\n<hr />\n<p><sub>See <a href=\"https://stackoverflow.com/questions/2921847\">What do ** (double star/asterisk) and * (star/asterisk) mean in a function call?</a> for the complementary question about arguments.</sub></p>\n"}
{"id": 28, "Title": "How do I list all files of a directory?", "Body": "<p>How can I list all files of a directory in Python and add them to a <code>list</code>?</p>\n"}
{"id": 29, "Title": "How can I access environment variables in Python?", "Body": "<p>How can I get the value of an environment variable in Python?</p>\n"}
{"id": 30, "Title": "How do I sort a dictionary by value?", "Body": "<p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.</p>\n\n<p>I can sort on the keys, but how can I sort based on the values?</p>\n\n<p>Note: I have read Stack Overflow question here <em><a href=\"https://stackoverflow.com/questions/72899\">How do I sort a list of dictionaries by a value of the dictionary?</a></em> and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.</p>\n"}
{"id": 31, "Title": "How do I clone a list so that it doesn&#39;t change unexpectedly after assignment?", "Body": "<p>While using <code>new_list = my_list</code>, any modifications to <code>new_list</code> changes <code>my_list</code> every time. Why is this, and how can I clone or copy the list to prevent it? For example:</p>\n<pre><code>&gt;&gt;&gt; my_list = [1, 2, 3]\n&gt;&gt;&gt; new_list = my_list\n&gt;&gt;&gt; new_list.append(4)\n&gt;&gt;&gt; my_list\n[1, 2, 3, 4]\n</code></pre>\n"}
{"id": 32, "Title": "How do I pass a variable by reference?", "Body": "<p>I wrote this class for testing:</p>\n<pre><code>class PassByReference:\n    def __init__(self):\n        self.variable = 'Original'\n        self.change(self.variable)\n        print(self.variable)\n\n    def change(self, var):\n        var = 'Changed'\n</code></pre>\n<p>When I tried creating an instance, the output was <code>Original</code>. So it seems like parameters in Python are passed by value. Is that correct? How can I modify the code to get the effect of pass-by-reference, so that the output is <code>Changed</code>?</p>\n<hr />\n<p><sub>Sometimes people are surprised that code like <code>x = 1</code>, where <code>x</code> is a parameter name, doesn't impact on the caller's argument, but code like <code>x[0] = 1</code> does. This happens because <em>item assignment</em> and <em>slice assignment</em> are ways to <strong>mutate</strong> an existing object, rather than reassign a variable, despite the <code>=</code> syntax. See <a href=\"https://stackoverflow.com/questions/575196/\">Why can a function modify some arguments as perceived by the caller, but not others?</a> for details.</sub></p>\n<p><sub>See also <a href=\"https://stackoverflow.com/questions/373419/\">What&#39;s the difference between passing by reference vs. passing by value?</a> for important, language-agnostic terminology discussion.</sub></p>\n"}
{"id": 33, "Title": "How do I print colored text to the terminal?", "Body": "<p>How do I output colored text to the terminal in Python?</p>\n"}
{"id": 34, "Title": "Manually raising (throwing) an exception in Python", "Body": "<p>How do I raise an exception in Python so that it can later be caught via an <code>except</code> block?</p>\n"}
{"id": 35, "Title": "Understanding Python super() with __init__() methods", "Body": "<p>Why is <code>super()</code> used?</p>\n<p>Is there a difference between using <code>Base.__init__</code> and <code>super().__init__</code>?</p>\n<pre><code>class Base(object):\n    def __init__(self):\n        print &quot;Base created&quot;\n        \nclass ChildA(Base):\n    def __init__(self):\n        Base.__init__(self)\n        \nclass ChildB(Base):\n    def __init__(self):\n        super(ChildB, self).__init__()\n        \nChildA() \nChildB()\n</code></pre>\n"}
{"id": 36, "Title": "How do I make a time delay?", "Body": "<p>How do I put a time delay in a Python script?</p>\n"}
{"id": 37, "Title": "How do I change the size of figures drawn with Matplotlib?", "Body": "<p>How do I change the size of figure drawn with Matplotlib?</p>\n"}
{"id": 38, "Title": "How do I concatenate two lists in Python?", "Body": "<p>How do I concatenate two lists in Python?</p>\n\n<p>Example:</p>\n\n<pre><code>listone = [1, 2, 3]\nlisttwo = [4, 5, 6]\n</code></pre>\n\n<p>Expected outcome:</p>\n\n<pre><code>&gt;&gt;&gt; joinedlist\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n"}
{"id": 39, "Title": "How do I check if a list is empty?", "Body": "<p>For example, if passed the following:</p>\n\n<pre><code>a = []\n</code></pre>\n\n<p>How do I check to see if <code>a</code> is empty?</p>\n"}
{"id": 40, "Title": "How do I make function decorators and chain them together?", "Body": "<p>How do I make two decorators in Python that would do the following?</p>\n<pre><code>@make_bold\n@make_italic\ndef say():\n   return &quot;Hello&quot;\n</code></pre>\n<p>Calling <code>say()</code> should return:</p>\n<pre><code>&quot;&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;&quot;\n</code></pre>\n"}
{"id": 41, "Title": "How do I split a list into equally-sized chunks?", "Body": "<p>How do I split a list of arbitrary length into equal sized chunks?</p>\n<hr />\n<p><sub>See also: <a href=\"https://stackoverflow.com/q/434287\">How to iterate over a list in chunks</a>.<br />\nTo chunk strings, see <a href=\"https://stackoverflow.com/questions/9475241\">Split string every nth character?</a>.</sub></p>\n"}
{"id": 42, "Title": "Find the current directory and file&#39;s directory", "Body": "<p>How do I determine:</p>\n<ol>\n<li>the current directory (where I was in the shell when I ran the Python script), and</li>\n<li>where the Python file I am executing is?</li>\n</ol>\n"}
{"id": 43, "Title": "What is the difference between Python&#39;s list methods append and extend?", "Body": "<p>What's the difference between the list methods <code>append()</code> and <code>extend()</code>?</p>\n"}
{"id": 44, "Title": "Why is &quot;1000000000000000 in range(1000000000000001)&quot; so fast in Python 3?", "Body": "<p>It is my understanding that the <code>range()</code> function, which is actually <a href=\"https://docs.python.org/3/library/stdtypes.html#typesseq-range\" rel=\"noreferrer\">an object type in Python 3</a>, generates its contents on the fly, similar to a generator.</p>\n<p>This being the case, I would have expected the following line to take an inordinate amount of time because, in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated:</p>\n<pre><code>1_000_000_000_000_000 in range(1_000_000_000_000_001)\n</code></pre>\n<p>Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous).</p>\n<p>I have also tried things like this, but the calculation is still almost instant:</p>\n<pre><code># count by tens\n1_000_000_000_000_000_000_000 in range(0,1_000_000_000_000_000_000_001,10)\n</code></pre>\n<p>If I try to implement my own range function, the result is not so nice!</p>\n<pre><code>def my_crappy_range(N):\n    i = 0\n    while i &lt; N:\n        yield i\n        i += 1\n    return\n</code></pre>\n<p>What is the <code>range()</code> object doing under the hood that makes it so fast?</p>\n<hr />\n<p><a href=\"https://stackoverflow.com/a/30081318/2437514\">Martijn Pieters's answer</a> was chosen for its completeness, but also see <a href=\"https://stackoverflow.com/a/30081894/2437514\">abarnert's first answer</a> for a good discussion of what it means for <code>range</code> to be a full-fledged <em>sequence</em> in Python 3, and some information/warning regarding potential inconsistency for <code>__contains__</code> function optimization across Python implementations. <a href=\"https://stackoverflow.com/a/30088140/2437514\">abarnert's other answer</a> goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of <code>xrange</code> in Python 2). Answers <a href=\"https://stackoverflow.com/a/30081467/2437514\">by poke</a> and <a href=\"https://stackoverflow.com/a/30081470/2437514\">by wim</a> provide the relevant C source code and explanations for those who are interested.</p>\n"}
{"id": 45, "Title": "Renaming column names in Pandas", "Body": "<p>I want to change the column labels of a Pandas DataFrame from</p>\n<pre><code>['$a', '$b', '$c', '$d', '$e']\n</code></pre>\n<p>to</p>\n<pre><code>['a', 'b', 'c', 'd', 'e']\n</code></pre>\n"}
{"id": 46, "Title": "How can I remove a key from a Python dictionary?", "Body": "<p>I want to remove a key from a dictionary if it is present. I currently use this code:</p>\n<pre class=\"lang-py prettyprint-override\"><code>if key in my_dict:\n    del my_dict[key]\n</code></pre>\n<p>Without the <code>if</code> statement, the code will raise <code>KeyError</code> if the key is <em>not</em> present. How can I handle this more simply?</p>\n<hr />\n<p><sub>See <a href=\"https://stackoverflow.com/questions/5844672\">Delete an element from a dictionary</a> for more general approaches to the problem of removing a key from a dict (including ones which produce a modified copy).</sub></p>\n"}
{"id": 47, "Title": "Convert string &quot;Jun 1 2005 1:33PM&quot; into datetime", "Body": "<p>I have a huge list of datetime strings like the following</p>\n<pre class=\"lang-py prettyprint-override\"><code>[&quot;Jun 1 2005 1:33PM&quot;, &quot;Aug 28 1999 12:00AM&quot;]\n</code></pre>\n<p>How do I convert them into <a href=\"https://docs.python.org/3/library/datetime.html#datetime-objects\" rel=\"noreferrer\"><code>datetime</code></a> objects?</p>\n"}
{"id": 48, "Title": "How to upgrade all Python packages with pip", "Body": "<p>Is it possible to upgrade all Python packages at one time with <strong><a href=\"https://pypi.python.org/pypi/pip\" rel=\"noreferrer\"><code>pip</code></a></strong>?</p>\n<p><strong>Note</strong>: that there is <a href=\"https://github.com/pypa/pip/issues/4551\" rel=\"noreferrer\">a feature request</a> for this on the official issue tracker.</p>\n"}
{"id": 49, "Title": "How can I sort a list of dictionaries by a value of the dictionary in Python?", "Body": "<p>How do I sort a list of dictionaries by a specific key's value? Given:</p>\n<pre class=\"lang-py prettyprint-override\"><code>[{'name': 'Homer', 'age': 39}, {'name': 'Bart', 'age': 10}]\n</code></pre>\n<p>When sorted by <code>name</code>, it should become:</p>\n<pre class=\"lang-py prettyprint-override\"><code>[{'name': 'Bart', 'age': 10}, {'name': 'Homer', 'age': 39}]\n</code></pre>\n"}
