"Generate Python code that authenticates with the Cloudflare API using API tokens and retrieves a list of all DNS records for a specific domain."
"Generate Python code that establishes a secure connection using the ACME protocol to request and obtain SSL/TLS certificates for a website."
"Generate Python code that uses the Cloudflare DNS Authenticator plugin for Certbot to automatically update DNS records for domain validation when obtaining SSL/TLS certificates."
"Generate Python code that lists all available S3 buckets in an AWS account using the AWS SDK for Python."
"Generate Python code that performs a file upload using the HTTP library's thread-safe connection pooling feature, ensuring efficient and secure transmission of the file data."
"Generate Python code that interacts with the low-level data-driven core of boto 3 to programmatically access and manipulate AWS services and resources."
"Generate Python code that sends an HTTP GET request to a specified URL, retrieves the response, and allows for easy handling of headers, cookies, and other HTTP-related data for a streamlined and user-friendly experience."
"Generate Python code that retrieves and imports Mozilla's CA Bundle to ensure secure SSL/TLS communication in your application."
"Generate Python code that demonstrates the usage of backported and experimental type hints for Python 3.9+, showcasing how to annotate functions and variables with the latest type hinting features available in Python."
"Generate Python code that downloads a specific package, builds it, installs it, upgrades it if it's already installed, and uninstalls it if needed."
"Generate Python code that maps the status proto messages in a gRPC service to corresponding custom-defined error codes and messages."
"Generate Python code that identifies the encoding of a given text file using the Universal Charset Detector package as an alternative to Chardet, ensuring open-source reliability and active maintenance."
"Generate Python code that converts a given Unicode string representing an internationalized domain name into its ASCII-compatible form using the IDNA encoding scheme."
"Generate Python code that automatically checks for the latest version of a specified Python package and prompts the user to update if a newer version is available."
"Generate Python code that converts a given date and time string in a specific format (e.g. 'YYYY-MM-DD HH:MM:SS') into a datetime object using the extensions provided by the package."
"Generate Python code that asynchronously retrieves a list of all objects in a specific S3 bucket using the aiohttp library and botocore's async client for AWS services."
"Generate Python code that uploads a local file to a specific bucket in Amazon S3 using the transfer manager, providing options for encryption, metadata, and monitoring transfer progress."
"Generate Python code that converts Python 2 code to Python 3 code using compatibility utilities provided by the package."
"Generate Python code that creates a multi-dimensional array and performs element-wise mathematical operations on the array using the functions provided by the package for array computing."
"Generate Python code that parses a YAML file and extracts specific data fields to be used in a Python program."
"Generate Python code that lists all files and directories in a specific folder on an S3 bucket using the convenient filesystem interface provided by this package."
"Generate Python code that encrypts a message using AES encryption from the cryptography package and then decrypts the encrypted message back to its original form."
"Generate Python code that lists all files and directories within a specified directory, including their names, sizes, and last modified dates."
"Generate Python code that A Python package that calculates the monthly payment for a loan based on the principal amount, interest rate, and loan term.

Generate Python code that takes user input for the principal amount, interest rate, and loan term, and then calculates and prints the monthly payment for the loan using the formula for mortgage payments."
"Generate Python code that validates a function input parameter based on the specified type hint using the package's built-in validation capabilities."
"Generate Python code that interfaces with a C library to perform matrix multiplication using functions defined in the C code."
"Generate Python code that extracts and prints the version number and author information from a specified Python package."
"Generate Python code that uses the PyPA recommended tool to install a specific Python package from the Python Package Index (PyPI)."
"Generate Python code that parses a C file and extracts all the function declarations along with their return types, function names, and parameter types."
"Generate Python code that creates a pandas DataFrame from a time series dataset, performs statistical analysis to calculate mean, median, and standard deviation, and then visualizes the data using matplotlib for in-depth data analysis."
"Generate Python code that creates a class using the package that automatically generates getter and setter methods for all attributes, without the need for writing boilerplate code."
"Generate Python code that creates a command line interface using the composable toolkit, allowing users to input commands, arguments, and options to perform various functions in a modular and customizable manner."
"Generate Python code that retrieves the user data directory path for the current platform, ensuring platform-specific compatibility."
"Generate Python code that encrypts a given message using RSA encryption and outputs the ciphertext."
"Generate Python code that safely adds untrusted user input strings to HTML markup by utilizing the `html` module to escape any potentially harmful characters and prevent cross-site scripting attacks."
"Generate Python code that extracts specific data fields from a JSON file using matching expressions to filter and retrieve only the desired information."
"Generate Python code that utilizes the template engine to render a dynamic HTML webpage with user input data from a form."
"Generate Python code that retrieves the current time in a specific timezone using the world timezone definitions provided in the package, taking into account both modern and historical timezone data."
"Generate Python code that extracts all files from a zip archive using the pathlib-compatible object wrapper provided by the package, allowing for seamless file manipulation within the zip file."
"Generate Python code that decodes a given ASN.1 encoded data using DER/BER/CER codecs according to X.208 standards."
"Generate Python code that demonstrates how to create a custom plugin with hooks that can be called from the main application to execute specific functionality."
"Generate Python code that uses Pydantic to validate incoming data and serialize it into Python objects."
"Generate Python code that highlights the syntax of a given code snippet using Pygments package."
"Generate Python code that makes a request to the Google API client core library to retrieve a list of all users in a specified Google Workspace domain."
"Generate Python code that authenticates a user with Google's OAuth 2.0 API using the Google Authentication Library, obtaining an access token to securely access Google services on behalf of the user."
"Generate Python code that creates a virtual environment, installs the package, and then creates a built-package format for a Python project."
"Generate Python code that establishes an HTTP/1.1 connection and sends a GET request to a specified URL, handling the response and displaying the status code along with the response body."
"Generate Python code that detects and prints out the name of the asynchronous library being used in the current code execution environment."
"Generate Python code that prints a message in bold red text on the terminal screen using the cross-platform colored text package."
"Generate Python code that defines a memoized function using the memoizing decorators provided by the package, ensuring that the function's results are cached and returned from memory instead of recalculating them for repeated inputs."
"Generate Python code that locks a specified file to prevent multiple processes from simultaneously accessing or modifying it."
"Generate Python code that utilizes the high-level concurrency and networking framework to create a simple TCP server that can handle multiple client connections concurrently using asyncio or Trio."
"Generate Python code that creates a virtual environment using the package, installs specific packages, and activates the environment for development purposes."
"Generate Python code that defines a class with reusable constraint types using the `typing.Annotated` feature to specify constraints for function arguments and return types."
"Generate Python code that uses the pytest package to test a function that calculates the factorial of a given number and asserts that the result is correct."
"Generate Python code that serializes and deserializes data using the common protobufs provided by Google APIs."
"Generate Python code that converts Protocol Buffers messages to gRPC messages and vice versa for seamless communication between microservices."
"Generate Python code that utilizes the next generation HTTP client to make a GET request to a specified URL and returns the response data."
"Generate Python code that retrieves the current time zone information using the IANA time zone data provider and displays the corresponding time zone name, current time, and offset from UTC."
"Generate Python code that validates a given JSON object against a specified JSON Schema using the functionalities provided by the package."
"Generate Python code that decodes an ASN.1-based protocol message using the modules provided in this package."
"Generate Python code that reads and parses a config.ini file using the brain-dead simple config-ini parsing package, allowing access to the configuration settings within the file."
"Generate Python code that sends a GET request to a specified URL using this minimal low-level HTTP client package and prints out the response content received."
"Generate Python code that creates an asynchronous HTTP server using the asyncio framework to handle incoming requests and responses."
"Generate Python code that encodes a JSON web token containing user authentication information with a specified secret key and expiration time."
"Generate Python code that reads a TOML file named 'config.toml', extracts the key-value pairs, and stores them in a dictionary for further processing."
"Generate Python code that lists all available AWS services using the Universal Command Line Environment for AWS."
"Generate Python code that creates a decorator function to log the input arguments and output result of a specified function, and then applies the decorator to a given function."
"Generate Python code that demonstrates how to create and manipulate a multidict data structure, including adding, updating, and retrieving key-value pairs with support for multiple values per key."
"Generate Python code that extracts the domain name and path from a given URL using the functions provided in the "Yet another URL library"."
"Generate Python code that reads data from a Parquet file using Apache Arrow and performs data manipulation operations such as filtering, grouping, and aggregation."
"Generate Python code that authenticates a user using OAuthlib with the Requests library for making HTTP requests."
"Generate Python code that creates a progress meter with customizable options such as bar style, speed, and completion message for tracking the progress of a data processing task."
"Generate Python code that creates a list of asynchronous callbacks using the aiosignal package and registers them for execution."
"Generate Python code that creates a custom class using the package to define a mutable sequence with the ability to add, remove, and modify elements, ensuring it adheres to the collections.abc.MutableSequence interface."
"Generate Python code that monitors and logs the CPU usage, memory usage, and network activity of the current system, compatible with Python 2.7 syntax."
"Generate Python code that reads a TOML file, preserves the original styling (indentation, spacing, and comments), and writes the data back to a new or existing TOML file while maintaining the same style."
"Generate Python code that connects to a MySQL database using the Database Abstraction Library and retrieves all records from a specified table, then prints the results to the console."
"Generate Python code that reads key-value pairs from a .env file and sets them as environment variables to be used within a Python script."
"Generate Python code that signs an OAuth request using this package's thorough and spec-compliant implementation of the request-signing logic."
"Generate Python code that demonstrates how to use exception groups as defined in PEP 654 to organize and handle multiple exceptions in a single context."
"Generate Python code that creates and manipulates persistent data structures in Python using Rust's rpds library bindings."
"Generate Python code that uses the utility library to match file paths against gitignore style patterns to determine if a file should be ignored or not."
"Generate Python code that creates multiple concurrent tasks within the same process to efficiently execute parallel computations."
"Generate Python code that defines a parsing grammar to extract key information from a structured text file, using the pyparsing module to create rules and methods for efficient parsing and extraction."
"Generate Python code that creates a cache for frequently accessed properties in a class, automatically updating and refreshing the cache when properties are modified or accessed."
"Generate Python code that calculates the probability density function and cumulative distribution function for a given distribution using the distribution utilities package."
"Generate Python code that resizes an image file using the Python Imaging Library (Fork) to a specific width and height, maintaining aspect ratio and saving the new image with a specified filename."
"Generate Python code that implements the Newton-Raphson method for finding the root of a nonlinear equation in scientific computing."
"Generate Python code that retrieves the JSON Schema meta-schemas and vocabularies from the Registry and allows for dynamic validation of JSON data against these schemas."
"Generate Python code that renders a progress bar with a specific percentage completion, a markdown-formatted text, and a syntax-highlighted code snippet to the terminal interface."
"Generate Python code that establishes a bidirectional communication channel using HTTP/2 for Remote Procedure Calls (RPC) between a client and server, allowing for efficient and low-latency data exchange."
"Generate Python code that inspects the data types of variables at runtime and provides detailed information on their structures and nested attributes."
"Generate Python code that extracts data from a JSON file using JSON referencing and outputs specific key-value pairs based on a given JSON pointer."
"Generate Python code that utilizes the advanced features of the python-requests library to send a POST request with custom headers, cookies, and a JSON payload to a specified URL, and then prints the response content."
"Generate Python code that extracts text data from a specific website's HTML code using the BeautifulSoup library for screen-scraping purposes."
"Generate Python code that extracts and prints all text within HTML elements that are selected using CSS selectors and parsed with Beautiful Soup."
"Generate Python code that reads data from an Excel 2010 xlsx file, extracts specific columns, and writes the extracted data to a new Excel 2010 xlsm file."
"Generate Python code that implements a Happy Eyeballs algorithm for asyncio, allowing for simultaneous connection attempts to multiple IP addresses for improved network performance and reliability."
"Generate Python code that utilizes the OpenSSL library to create a secure SSL/TLS connection to a remote server and perform a secure data transfer."
"Generate Python code that reads an XML file using the lxml.xmlfile implementation from the standard library and extracts specific elements or attributes from the file for further processing."
"Generate Python code that utilizes the additional routines provided by the package to perform advanced operations on iterables, such as filtering, mapping, and reducing, in a more efficient and concise manner than the standard itertools module."
"Generate Python code that converts reStructuredText documents into HTML, LaTeX, XML, or plaintext formats using the Docutils library."
"Generate Python code that converts a Markdown string into HTML using the markdown-it library, ensuring accurate and precise parsing of Markdown syntax."
"Generate Python code that extracts all URLs from a Markdown file and prints them out as a list."
"Generate Python code that parses a given string containing an ISO 8601 formatted date, time, or duration and returns it in a structured format for further processing or display."
"Generate Python code that parses an XML file using the ElementTree API in combination with libxml2/libxslt to extract specific data and manipulate the XML structure."
"Generate Python code that uploads a local file named 'example.txt' to a specific bucket in Google Cloud Storage using the Google Cloud Storage API client library."
"Generate Python code that uses OpenTelemetry Semantic Conventions to instrument a Flask application for distributed tracing with automatic context propagation and correlation of traces across services."
"Generate Python code that creates a WSGI web application using the features and utilities provided by the comprehensive WSGI web application library."
"Generate Python code that uses the decorators provided by this package to add logging functionality to a function, printing the function name, its arguments, and return value every time the function is called."
"Generate Python code that serializes a Python dictionary containing various data types into a MessagePack format for efficient and compact storage or transmission."
"Generate Python code that defines custom type annotations using the type system extensions provided by the mypy type checker for ensuring type safety and consistency in your program."
"Generate Python code that creates an instance of the Pickler class from the package, extends the standard pickle.Pickler functionality by adding custom serialization methods, and then pickles an object using the extended Pickler instance."
"Generate Python code that serializes and deserializes data using protocol buffers in a visually appealing and pythonic manner."
"Generate Python code that retrieves a list of classifiers available on PyPI (pypi.org) using the canonical source for classifiers package."
"Generate Python code that scans the system environment to detect any active shell processes and provides a detailed report on their surrounding context and activities."
"Generate Python code that connects to a WebSocket server using low level API options and sends a message with custom headers and payload."
"Generate Python code that calculates and displays the code coverage percentage of a Python script using the package for code coverage measurement."
"Generate Python code that creates a ZeroMQ socket, binds it to a specific port for publishing messages, and sends a series of JSON-encoded data packets to a specified endpoint using ZeroMQ bindings."
"Generate Python code that encrypts a message using the NaCl library's cryptography functions and then decrypts the encrypted message to recover the original plaintext."
"Generate Python code that retries calling a specific function until it succeeds, with a maximum number of attempts and a delay between each attempt."
"Generate Python code that uses the Poetry PEP 517 Build Backend package to programmatically build a Python project with its dependencies and generate a distributable package in a specific format, such as a wheel or a source distribution."
"Generate Python code that uses the provided package to create a context manager that sets a timeout for executing asynchronous functions within an asyncio program."
"Generate Python code that creates a Sorted List, populates it with integers in descending order, and then prints the list after adding a new integer at a specific index."
"Generate Python code that authenticates a user with Microsoft Azure using the Azure Core Library for Python and retrieves a list of resources in a specific Azure subscription."
"Generate Python code that decorates a specific function named 'old_function' with the @deprecated decorator to mark it as deprecated and provide a custom warning message when the function is called."
"Generate Python code that instruments a Python application to collect distributed traces and metrics using the OpenTelemetry Python API."
"Generate Python code that utilizes the Standard Health Checking Service for gRPC to continuously monitor the health status of a gRPC server and handle any necessary health check requests."
"Generate Python code that imports the alternative regular expression module and uses it to search a given string for all occurrences of a specific pattern, then prints the results."
"Generate Python code that establishes a connection to a PostgreSQL database using psycopg2, executes a query to retrieve data from a specified table, and then iterates through the results to print each row to the console."
"Generate Python code that utilizes the simple framework to create a web application with multiple pages, each containing dynamic content and interactive features such as forms and user authentication."
"Generate Python code that utilizes the little ASGI library to create a simple web application that serves static files and handles incoming HTTP requests asynchronously."
"Generate Python code that authenticates a user with a Microsoft Azure Active Directory account or a Microsoft Account using the MSAL library, obtaining an access token to access Microsoft Cloud resources secured by Azure Active Directory."
"Generate Python code that uses the machine learning modules to train a decision tree classifier on a dataset and make predictions on new data points."
"Generate Python code that parses an ASN.1 encoded X.509 certificate and extracts the public key information from it."
"Generate Python code that initializes the OpenTelemetry Python SDK with a specified exporter and sets up instrumentation for tracing requests in a Flask application."
"Generate Python code that takes a Unicode string as input and calculates the exact displayed width of the string when printed in a terminal, accounting for any special characters or formatting that may affect its width."
"Generate Python code that authenticates and connects to the Google Cloud API using the client core library."
"Generate Python code that initializes and runs a FastAPI application using the Uvicorn ASGI server for optimal performance."
"Generate Python code that establishes a connection to the LangSmith LLM Tracing and Evaluation Platform using the client library and retrieves evaluation data for analysis."
"Generate Python code that creates a FastAPI web application with multiple endpoints for handling CRUD operations on a database, including user authentication and authorization, all optimized for high performance and production-readiness."
"Generate Python code that clones a Git repository, lists all branches, and retrieves the commit history for a specific branch using GitPython."
"Generate Python code that securely stores a user's password in an encrypted format and provides a method to retrieve and decrypt the password for authentication purposes."
"Generate Python code that securely hashes a user's password using the package's modern hashing algorithms for enhanced security."
"Generate Python code that runs a subprocess in a pseudo terminal, executes a specified command within the subprocess, and captures the output from the pseudo terminal for further processing."
"Generate Python code that uses Pexpect to automate the interaction with a console application, such as logging in, executing commands, and capturing output."
"Generate Python code that authenticates a user with their Microsoft Azure account using the Identity Library, retrieves an access token, and makes a request to a protected Azure resource."
"Generate Python code that downloads a pre-trained model from the Hugging Face model hub using the client library and publishes your own custom dataset to the hub."
"Generate Python code that establishes a connection to a Snowflake database, retrieves data from a specific table, and performs basic data manipulation operations such as filtering, sorting, and aggregating the data."
"Generate Python code that authenticates with the Yandex Cloud API using the SDK and retrieves information about all available cloud resources in a specific region."
"Generate Python code that automatically detects the encoding of a given text file using the Universal Encoding Detector in Python 3."
"Generate Python code that creates and manages a sliding window memory map using the pure Python implementation provided in the package, allowing for efficient memory management and manipulation within a specified window size."
"Generate Python code that takes a tabular dataset and formats it in a visually appealing way with aligned columns, headers, and borders for easy readability."
"Generate Python code that creates a directed graph with nodes representing cities and edges representing roads, with attributes such as distance and traffic flow, and calculates the shortest path between two specified cities using Dijkstra's algorithm."
"Generate Python code that creates a class named 'Person' with attributes for 'name', 'age', and 'gender', along with methods to set and get each attribute, and a method to print out the person's information."
"Generate Python code that dynamically manages the number of threads in a thread pool based on the current workload to optimize resource usage and prevent overloading the system."
"Generate Python code that validates a JSON document against a specified JSON schema using the fastest implementation available in the Python ecosystem."
"Generate Python code that creates and serializes OpenTelemetry traces and metrics into Protocol Buffers format using the OpenTelemetry Python Proto package."
"Generate Python code that reads and executes build backend hooks specified in a pyproject.toml file for automated build processes and project management."
"Generate Python code that retrieves a specific commit object from a Git repository using the Git Object Database package and prints out its details."
"Generate Python code that securely serializes and deserializes sensitive data to be passed between trusted and untrusted environments, ensuring data integrity and preventing potential security vulnerabilities."
"Generate Python code that establishes a connection to a D-Bus service using pure Python, sends a method call to the service, and receives the response."
"Generate Python code that queries a specified domain's DNS records and prints out the results, including the IP addresses associated with the domain, using the DNS toolkit package."
"Generate Python code that downloads a large media file from Google using resumable uploads to ensure uninterrupted downloading in case of network disruptions."
"Generate Python code that uses the package to compile multiple Python source files into a single executable file with all dependencies included for easy distribution."
"Generate Python code that securely stores and retrieves sensitive information using the FreeDesktop.org Secret Service API."
"Generate Python code that authenticates a user with their Google account and retrieves their calendar events using the Google API Client Library for Python."
"Generate Python code that creates type hints for functions that utilize the requests library, ensuring accurate and comprehensive static type checking for HTTP requests and responses."
"Generate Python code that creates a scatter plot using the matplotlib library to visualize the relationship between two sets of data."
"Generate Python code that establishes a secure SSH2 connection to a remote server, authenticates using a username and password, executes a command on the server, and retrieves the command output."
"Generate Python code that recursively traverses a Python object, serializes its contents, and saves it to a file in a format such as JSON or Pickle for easy storage and retrieval."
"Generate Python code that utilizes the package to create a signal system for broadcasting messages between objects, allowing for efficient and straightforward communication."
"Generate Python code that calculates the CRC32C checksum for a given input data using the Google CRC32C C library wrapper."
"Generate Python code that reads a YAML file, preserves any comments within the file, maintains the original sequence and flow style of mappings, and ensures that the order of keys in the map is preserved during parsing and emission."
"Generate Python code that creates a pipeline of Python functions to process a list of data, where each function in the pipeline takes the output of the previous function as input and performs a specific operation on it."
"Generate Python code that creates a command line interface with interactive features, such as user input prompts, dynamic output updates, and customizable command options."
"Generate Python code that uses the rapid fuzzy string matching package to efficiently compare a list of strings against a target string and return the most similar strings along with their similarity scores."
"Generate Python code that decorates a function with a backoff and retry mechanism, allowing the function to automatically retry a specified number of times with increasing delays between attempts in case of failures."
"Generate Python code that automatically instruments a Python application with OpenTelemetry for monitoring and tracing purposes."
"Generate Python code that extracts metadata information such as font name, style, and character set from a given font file."
"Generate Python code that authenticates a user with Google's OAuth 2.0 authentication system and retrieves a user's profile information."
"Generate Python code that establishes a WebSocket connection with a server using RFC 6455 & 7692 protocols and sends and receives messages over the connection."
"Generate Python code that parses an XML file using the standard library modules while implementing protection against XML bombs to prevent denial of service attacks."
"Generate Python code that retrieves the version of the operating system currently running on the system using the Distro package's OS platform information API."
"Generate Python code that uses the Cassowary constraint solver to dynamically adjust the layout of user interface elements based on specified constraints, such as maintaining a fixed distance between two elements or ensuring certain elements remain aligned."
"Generate Python code that reads a resource file from a specified Python package and outputs its content to the console."
"Generate Python code that authenticates with the OpenAI API using your API key, queries the API to retrieve a list of available models, and then selects a specific model to generate text based on a given prompt."
"Generate Python code that automates the process of migrating a database structure using SQLAlchemy, including creating, altering, and dropping tables as needed."
"Generate Python code that configures an OpenTelemetry Collector to export data in Protobuf format over HTTP to a specified endpoint."
"Generate Python code that utilizes the MSAL EX persistence API to save user authentication data on disk, ensuring data is encrypted and implementing a file lock mechanism to handle concurrent data access on Windows, macOS, and Linux platforms."
"Generate Python code that connects to an AWS S3 bucket, loads a CSV file using Pandas, performs data manipulation and analysis, and then saves the results back to the S3 bucket."
"Generate Python code that converts an XML file into a nested dictionary structure, making it easier to work with the data as if it were JSON."
"Generate Python code that creates a composable style cycle for a user interface, allowing for easy customization and reusability of design elements."
"Generate Python code that compresses a file using the Zstandard compression algorithm and saves the compressed output to a new file."
"Generate Python code that uses the pytest-cov plugin to measure test coverage of a specific Python project, providing a detailed report of which parts of the codebase are covered by the tests."
"Generate Python code that connects to a Redis database, sets a key-value pair with a specified key and value, retrieves the value of the key, and then deletes the key from the database."
"Generate Python code that constructs and expands URI templates according to the RFC 6570 specification, allowing for dynamic substitution of variables and parameters based on specified values."
"Generate Python code that loads data from a JSON-like format file and dumps it into typed data structures using the package's functionalities."
"Generate Python code that sets up a web application to collect and propagate distributed traces using OpenTelemetry for monitoring and observability purposes."
"Generate Python code that connects to Google BigQuery API, retrieves data from a specific dataset and table, and performs a simple query to aggregate and summarize the data before storing the result in a new table."
"Generate Python code that parses a given SQL query without performing validation checks."
"Generate Python code that retrieves metadata information (such as name, version, dependencies) from a specific package installed on the system."
"Generate Python code that utilizes IPython to create an interactive computing environment for data analysis and visualization, including running code snippets, displaying results, and facilitating data exploration."
"Generate Python code that converts a nested dictionary containing various datatypes (such as lists, tuples, dictionaries, and sets) into native Python datatypes, and then converts it back to the original complex datatype structure."
"Generate Python code that reads a YAML file, parses its content using the C version of the ruamel.yaml library derived from libyaml, and then emits the parsed data back into a new YAML file."
"Generate Python code that uses functools to create a memoized function that caches the results of a slow computation, improving performance by storing previously computed values."
"Generate Python code that encodes data using the OpenTelemetry Protobuf format for sending telemetry data to a remote server."
"Generate Python code that creates a tzinfo object for the local timezone and returns the current date and time in that timezone."
"Generate Python code that creates a composite application using Language Model Modules (LLMs) to perform sentiment analysis on a given text input and generate a summary based on the analysis results."
"Generate Python code that sends an HTTP GET request to a specified URL and retrieves the response data using the comprehensive HTTP client library."
"Generate Python code that imports the package and demonstrates how to access and manipulate a specific method from a Java object using dynamic Python-Java integration."
"Generate Python code that uses the Google Authentication Library with httplib2 transport to make an authorized API request to the Google API and retrieve data from a specified endpoint."
"Generate Python code that sets up a caching mechanism using httplib2 for making HTTP requests and storing the responses locally to improve performance and reduce network traffic."
"Generate Python code that patches the asyncio package to enable the creation of nested event loops within an application, allowing for more granular control and organization of asynchronous tasks."
"Generate Python code that lists all running containers using the Docker Engine API."
"Generate Python code that uploads a local file to a specified Azure Blob Storage container using the Microsoft Azure Blob Storage Client Library for Python."
"Generate Python code that uses the GenAI Python SDK to create a deep learning model for image classification, training it on a dataset of 10,000 images and evaluating its accuracy on a separate validation set."
"Generate Python code that instruments requests made by a Python application using the OpenTelemetry framework to trace all outbound HTTP requests and capture relevant telemetry data."
"Generate Python code that applies the uncompromising code formatting rules specified by the package to a given Python script or code snippet."
"Generate Python code that uses a context manager from the package to safely handle file operations, ensuring the file is closed properly after reading or writing data."
"Generate Python code that sets up an OpenTelemetry Collector to export data in Protobuf format over gRPC to a specified endpoint."
"Generate Python code that compiles a Python script containing Cython code into a C extension module for optimized performance and seamless integration with existing Python codebase."
"Generate Python code that translates a given string of text into multiple languages using the internationalization utilities package."
"Generate Python code that trains a neural network model using the state-of-the-art machine learning algorithms provided by this package on a dataset and evaluates its performance using JAX, PyTorch, or TensorFlow."
"Generate Python code that calculates the contours of a 2D quadrilateral grid and plots them using the functionalities provided by the library."
"Generate Python code that initializes a configuration system using Traitlets to define and manage a set of configurable parameters for a Python application."
"Generate Python code that connects to a Prometheus server, queries a specific metric, and retrieves the latest data point for that metric."
"Generate Python code that installs a specific Python wheel file from a given path onto the system."
"Generate Python code that implements an autocompletion feature for a text editor, allowing users to receive suggestions for Python code while typing based on the context."
"Generate Python code that connects to a Weaviate instance, retrieves data from a specific schema class, and performs a complex query to filter and sort the results based on specific properties."
"Generate Python code that extracts the value of a specific node (e.g. '/path/to/node') from a JSON document using RFC 6901 compliant syntax."
"Generate Python code that sends automated email reminders for upcoming gym classes to registered users based on their preferences and schedule."
"Generate Python code that uses the package to lint and format a Python script named 'example.py' to ensure code quality and adherence to consistent style guidelines."
"Generate Python code that parses a JSON file containing a list of student records with attributes like name, age, and grades, and extracts relevant information such as the average age of students and highest grade achieved."
"Generate Python code that utilizes the package's machine learning algorithms to train a sentiment analysis model on a dataset of movie reviews and then predicts the sentiment of a new movie review input by the user."
"Generate Python code that creates a command-line interface (CLI) using Typer, utilizing Python type hints to easily define and parse command-line arguments for a user-friendly interaction experience."
"Generate Python code that parses a TOML file using the functions provided by Tom's Obvious, Minimal Language library and extracts specific key-value pairs to be used in a data processing pipeline."
"Generate Python code that creates a simple web application using the Tornado framework, with a basic homepage that displays "Hello, World!" when accessed."
"Generate Python code that uses the Poetry plugin to export the project's dependencies to a requirements.txt file for easy sharing and installation on other systems."
"Generate Python code that connects to the Aliyun service using the Aliyun Python SDK core module and retrieves a list of available resources."
"Generate Python code that installs the required dependencies for a project using the package manager, and creates a distributable package for easy deployment."
"Generate Python code that clones a Git repository from a specified URL, checks out a specific branch or commit, and lists the files in the repository along with their respective statuses (modified, added, deleted, etc.)."
"Generate Python code that creates a Jupyter notebook cell with inline Matplotlib backend settings to display plots directly within the notebook."
"Generate Python code that automatically logs all caught exceptions to a specified file for easy error tracking and debugging."
"Generate Python code that connects to a Sentry project, captures and sends error messages, and sets up custom logging configurations for real-time monitoring and debugging."
"Generate Python code that establishes a connection to a MySQL database, retrieves data from a specific table, and then performs a series of data manipulation operations on the retrieved data using the Pure Python MySQL Driver package."
"Generate Python code that extracts the version number from the source control management (SCM) tags to manage and update the version of your project automatically."
"Generate Python code that dynamically generates build configurations for a project based on user-defined settings and requirements using the features provided by the modern and extensible Python build backend package."
"Generate Python code that uses the super-fast templating language to render a dynamic web page with data fetched from an API and displays it in a visually appealing format."
"Generate Python code that automatically reorganizes and sorts all import statements in a Python script using the provided utility/library for better code readability and maintainability."
"Generate Python code that utilizes the McCabe checker plugin for flake8 to analyze the cyclomatic complexity of a Python codebase and identify areas where the code may be overly complex and in need of refactoring."
"Generate Python code that initializes a WSGI HTTP server on a UNIX system to handle incoming HTTP requests and route them to the appropriate WSGI application."
"Generate Python code that checks a given Python script for compliance with the PEP 8 style guide and outputs a list of any violations found, with line numbers and specific style rule references."
"Generate Python code that authenticates with an IAM API using client credentials and retrieves a list of users within the IAM system."
"Generate Python code that creates a virtual environment for a Node.js project, installs required dependencies, and activates the environment for development purposes."
"Generate Python code that deploys a new Kubernetes pod using the Kubernetes Python client, specifying the pod's container image, resource limits, and environment variables."
"Generate Python code that utilizes Cleo to create a command-line interface with customizable commands, options, and arguments for a user-friendly and easily testable application."
"Generate Python code that uses the package to add static type annotations to a function that calculates the factorial of a given integer input, ensuring type safety during development."
"Generate Python code that converts legacy web content encoded in different character encodings to a standardized encoding format for seamless compatibility across modern web platforms."
"Generate Python code that efficiently parses a large JSON file containing a list of objects and outputs the data in a readable format."
"Generate Python code that extracts the currently executing AST node of a specified frame, along with additional information such as the line number and source code, from a running Python program."
"Generate Python code that imports the `python_dateutil` package and defines type hints for a function that takes in a datetime object and returns a string representation of the date and time using the python-dateutil module."
"Generate Python code that annotates an Abstract Syntax Tree (AST) with the corresponding source code positions for each node."
"Generate Python code that imports the LLMs package and demonstrates how to create a composite application using multiple LLMs components for enhanced functionality and modularity."
"Generate Python code that converts a Markdown formatted text file to HTML using John Gruber's Markdown implementation."
"Generate Python code that changes the font color and style of text to ANSI color formatting for output in the terminal."
"Generate Python code that defines a lexer and parser using the Lex & Yacc tools to parse a simple programming language that supports arithmetic operations and variable assignments."
"Generate Python code that utilizes Pydantic to create a settings management system for a web application, ensuring type validation and automatic data parsing for configuration parameters."
"Generate Python code that extracts data from Python stack frames and tracebacks to create a detailed and informative display of the program's execution flow."
"Generate Python code that extracts all function names and their corresponding docstrings from a given module and saves them to a text file for easy reference."
"Generate Python code that evaluates an Abstract Syntax Tree (AST) node without causing any side effects in the program."
"Generate Python code that uses the asyncio package to asynchronously read a file and print its contents line by line."
"Generate Python code that formats log messages in JSON format using the JSON Log Formatter for the Python Logging Package."
"Generate Python code that sets up a pre-commit configuration file using the multi-language framework to automate the execution of various hooks before commits are pushed to the repository."
"Generate Python code that validates a configuration file for a web server application and outputs human-readable error messages for any incorrect or missing settings."
"Generate Python code that identifies the file type and format of a given file using the file identification library, providing the user with accurate information about the file's contents."
"Generate Python code that establishes a connection with a Databricks SQL cluster, executes SQL queries, and retrieves the results for further analysis and processing within a Python environment."
"Generate Python code that inspects the runtime type of variables using the utilities provided by the typing module."
"Generate Python code that parses a multipart stream of data, extracting and processing each part individually using the streaming multipart parser package."
"Generate Python code that simplifies a complex mathematical expression involving variables and constants using the computer algebra system (CAS) capabilities."
"Generate Python code that creates an ASGI application using the helper code provided in the package and adapts it to work with different ASGI server implementations."
"Generate Python code that connects to a MongoDB database, retrieves all documents from a specific collection, and prints out the results."
"Generate Python code that creates a new Jupyter Notebook with interactive code cells where users can input and execute Python code to perform data analysis on a given dataset."
"Generate Python code that uses the cryptographic library to encrypt a message using AES encryption with a randomly generated key and initialization vector."
"Generate Python code that converts a given date and time string in a specific format to a datetime object for easy manipulation and comparison."
"Generate Python code that reads an ini file, parses its contents, and logs any errors or warnings encountered during the process using the facilities provided by the library."
"Generate Python code that initializes an OpenTelemetry Collector Exporter for sending telemetry data to a specified destination with custom configurations such as authentication tokens and endpoint URLs."
"Generate Python code that creates a dynamic neural network using tensors with GPU acceleration for training and inference on a given dataset."
"Generate Python code that utilizes the pytest xdist plugin to distribute and run tests across multiple CPUs for faster test execution."
"Generate Python code that installs the specified package and project dependencies using the fastest possible method by leveraging the speed and efficiency of the Rust-written package manager."
"Generate Python code that applies a JSON patch (as defined in RFC 6902) to a given JSON object, updating it with the specified operations such as add, remove, replace, move, copy, and test."
"Generate Python code that connects to a Snowflake database using SQLAlchemy and executes a SQL query to retrieve data from a specific table."
"Generate Python code that calculates the area of a triangle given its three vertices in a 2D plane."
"Generate Python code that accesses and retrieves a secret from Google Cloud Secret Manager using the API client library."
"Generate Python code that checks if the current Python environment is running on Python 3 and, if not, automatically performs necessary syntax conversions for compatibility with Python 2."
"Generate Python code that establishes a connection with a debug adapter using the Debug Adapter Protocol and enables debugging of a Python script in real-time."
"Generate Python code that enables bash tab completion for command line arguments defined using the argparse module."
"Generate Python code that creates a client runtime for consuming RESTful APIs using AutoRest swagger generator."
"Generate Python code that utilizes execnet to deploy a Python script across multiple remote hosts simultaneously for efficient and rapid execution."
"Generate Python code that efficiently streams a large file from Azure Blob Storage, decompresses it if necessary (e.g., gzip, bz2, zst), and processes its contents in real-time without loading the entire file into memory."
"Generate Python code that authenticates a user with Azure Active Directory using the Microsoft Azure Client Library for Python and retrieves a list of common resources in the Azure environment."
"Generate Python code that establishes a secure authentication mechanism using the SCRAM protocol for a client-server communication setup."
"Generate Python code that uses the backported tarfile module to extract all files from a tar archive named 'example.tar' into a specified directory 'output_folder'."
"Generate Python code that imports the Jupyter core package and demonstrates the creation of a basic Jupyter notebook with markdown and code cells."
"Generate Python code that tokenizes text using the BPE tokenization algorithm provided by the tiktoken package, specifically for preparing text data to be used with OpenAI's models."
"Generate Python code that tests asynchronous functions using the pytest framework with asyncio support."
"Generate Python code that compares two version numbers using Semantic Versioning rules and returns whether the first version is greater than, equal to, or less than the second version."
"Generate Python code that calculates the square root of a large decimal number with precision using the arbitrary-precision floating-point arithmetic library."
"Generate Python code that sends custom metrics to Datadog's monitoring service using the Datadog Python library, including tags and timestamps for accurate tracking and visualization of performance data."
"Generate Python code that validates the syntax and deliverability of a given email address using the functionalities provided by the email address validation library."
"Generate Python code that creates an immutable list using the functions provided in the package for persistent and functional data structures."
"Generate Python code that scans a given Python program file for potential syntax errors, style violations, and code inefficiencies without actually executing the code."
"Generate Python code that converts a given date and time string into a more readable and user-friendly format using the functionalities provided by the Better dates & times package."
"Generate Python code that connects to an OpenSearch server, performs a search query, and retrieves the search results."
"Generate Python code that utilizes JSONPath to extract specific data from a JSON file, including using arithmetic and binary comparison operators, and stores the extracted data in a variable for further manipulation or analysis."
"Generate Python code that utilizes the deep learning capabilities of the package to train a neural network on a dataset of handwritten digits for image classification tasks."
"Generate Python code that monitors a specified directory for any changes (such as file creations, deletions, or modifications) and logs the details of each event in real-time."
"Generate Python code that connects to a Jupyter notebook server using the Jupyter protocol implementation and client libraries, retrieves information about the running notebooks, and displays a list of active sessions with their respective kernel IDs."
"Generate Python code that takes a string input representing a date and time in RFC3339 format and validates if it complies with the RFC3339 standard using the pure python RFC3339 validator package."
"Generate Python code that installs the IPython kernel for Jupyter and sets it as the default kernel for a specified Jupyter notebook, allowing for interactive Python code execution within the notebook."
"Generate Python code that uses the itertools and builtins modules to work with asynchronous operations in AsyncIO, combining both synchronous and asynchronous iterables for efficient data processing."
"Generate Python code that connects to the Databricks platform using the Databricks SDK for Python (Beta) and retrieves information about clusters, jobs, and notebooks."
"Generate Python code that retrieves the latest messages from a specific Slack channel using the Slack API Platform SDK for Python."
"Generate Python code that demonstrates how to utilize the package for improved parallel processing and concurrency in Python, specifically showcasing how to efficiently distribute tasks across multiple processes or threads."
"Generate Python code that parses a Markdown file, applies a custom plugin to highlight code blocks, and renders the parsed Markdown into HTML with syntax highlighting for code snippets."
"Generate Python code that serializes dataclasses instances to JSON format and then deserializes them back to dataclasses instances."
"Generate Python code that creates a mock object using the mock package and utilizes pytest fixtures to easily set up and tear down mock objects for testing purposes."
"Generate Python code that parses a CSS file and extracts all the class names and their corresponding styles into a dictionary for further manipulation and analysis."
"Generate Python code that compresses and decompresses large data sets using LZ4 compression algorithm."
"Generate Python code that establishes a connection to an Amazon Redshift database using the Redshift interface library and executes a SQL query to retrieve data from a specific table."
"Generate Python code that opens a JupyterLab notebook, imports a dataset from a CSV file, visualizes the data using matplotlib, and performs statistical analysis with pandas to generate insights."
"Generate Python code that reads a CSV file from HDFS using Apache Spark's Python API and performs a group by operation to count the occurrences of each unique value in a specified column, then saves the results to a new CSV file in the HDFS."
"Generate Python code that automatically downloads and installs all necessary dependencies for creating a standalone executable from a Python script."
"Generate Python code that takes a string of HTML content as input and sanitizes it using a safelist of allowed HTML elements and attributes, ensuring only the specified elements and attributes are included in the sanitized output."
"Generate Python code that checks a Python source code file for compliance with PEP8 style guidelines and identifies any potential errors using the Pyflakes static analysis tool."
"Generate Python code that authenticates a request to an Amazon Web Services (AWS) API using the AWS4 signature version, ensuring secure and authenticated access to AWS services."
"Generate Python code that establishes a connection to a MySQL server, executes a query to retrieve data from a specific table, and prints the results fetched from the database."
"Generate Python code that monitors a specified directory for file changes and automatically reloads the code whenever a file within that directory is modified."
"Generate Python code that converts a Jupyter Notebook file to a PDF document while preserving the code, markdown cells, and visualizations."
"Generate Python code that lists all installed Python versions on the system, including the paths to their executable files."
"Generate Python code that establishes a two-way communication channel between Jupyter notebooks and Python kernels using the Jupyter Python Comm implementation for seamless integration and data exchange."
"Generate Python code that downloads a large file from the Hugging Face Hub efficiently and quickly."
"Generate Python code that retrieves information about the repositories of a specified user on Github using the full Github API v3."
"Generate Python code that uses the cryptographic library to encrypt a message using AES encryption with a randomly generated key and IV, and then decrypts the encrypted message using the same key and IV."
"Generate Python code that converts a Jupyter Notebook file (.ipynb) to a PDF format using the nbconvert package, allowing for seamless integration of notebook content into a professional document-ready layout."
"Generate Python code that connects to a SQL database using Apache Airflow's common SQL provider package to execute a query and retrieve the results."
"Generate Python code that creates a set of REST endpoints for core services and APIs in a Jupyter web application backend."
"Generate Python code that creates a TensorBoard visualization to monitor the flow of tensors during the training process of a neural network model."
"Generate Python code that creates an asyncio event loop using the libuv backend for efficient handling of asynchronous tasks."
"Generate Python code that converts Unicode text into ASCII text using the most basic Text::Unidecode port available."
"Generate Python code that creates a new Excel XLSX file, adds multiple sheets with various data, and saves the file to a specified directory."
"Generate Python code that extracts docstrings from a Python file in reST, Google, or Numpydoc format and saves them to a separate text file for documentation purposes."
"Generate Python code that converts a sentence containing Unicode characters into a URL-friendly slug using the slugify function from the package, ensuring proper handling of Unicode characters."
"Generate Python code that uses the client library to execute a Jupyter notebook and save the output results for further analysis."
"Generate Python code that installs a specified package in editable mode, allowing for development and modification of the package's source code directly within the project environment."
"Generate Python code that connects to the Google Cloud Pub/Sub API, creates a new topic, subscribes to messages from that topic, and publishes a sample message to the topic."
"Generate Python code that uses the decorator to detect and raise an error when a subclass method attempts to override a superclass method with a different signature."
"Generate Python code that authenticates a user with the Vertex AI API client library, retrieves a list of available datasets, and then creates a new dataset for training machine learning models."
"Generate Python code that uses the file transport adapter from the Requests package to upload a local file to a specified URL endpoint using a POST request."
"Generate Python code that extracts HTTP headers from a given URL using framework-independent HTTP protocol utils."
"Generate Python code that connects to an Elasticsearch instance, searches for documents containing a specific keyword, and returns the results."
"Generate Python code that defines a class with methods for creating interfaces to enforce type-checking and provide a clear contract for classes that implement the interface."
"Generate Python code that securely hashes a user's password using the Argon2 algorithm to protect sensitive data."
"Generate Python code that decodes a JSON string into a Python object using the simple, fast, and extensible JSON encoder/decoder package."
"Generate Python code that creates a complex class utilizing both attrs and dataclasses to allow for easy composition of attributes and methods within the class."
"Generate Python code that converts complex data structures into a user-friendly text interface display, including formatting and organizing the data for easy readability."
"Generate Python code that converts a given Go Duration string into a datetime.timedelta object."
"Generate Python code that uses CFFI bindings to implement the Argon2 password hashing algorithm for securely hashing passwords."
"Generate Python code that creates a GraphQL schema and resolves queries using the GraphQL.js implementation for Python, ensuring compatibility with the JavaScript reference implementation for GraphQL."
"Generate Python code that retrieves a list of all resources (projects, folders, and organizations) managed by the Google Cloud Resource Manager API client library."
"Generate Python code that reads a Markdown file, applies a custom Pandoc filter written in Python to modify the document's elements, and then writes the modified Markdown output back to a file."
"Generate Python code that establishes a connection to a remote server using SOCKS protocol through PySocks module, and sends a GET request to retrieve a webpage content."
"Generate Python code that creates a reinforcement learning environment using the Gym package, specifically setting up a CartPole environment with default parameters for training an agent to balance a pole on a moving cart."
"Generate Python code that creates a custom Pygments theme by utilizing JupyterLab CSS variables for syntax highlighting in code snippets within a Jupyter notebook."
"Generate Python code that uses the dbt package to transform raw data from a database into structured analytics tables, allowing for seamless collaboration and efficient data modeling within a data team."
"Generate Python code that creates a custom enumeration class using the Advanced Enumerations package, defining distinct values with specific names and associated constant values."
"Generate Python code that tokenizes a given text using the Natural Language Toolkit (NLTK) library, and prints out a list of all the words in the text along with their corresponding part-of-speech tags."
"Generate Python code that lists all files in a specific directory on Google Cloud Storage using the Convenient Filesystem interface provided by this package."
"Generate Python code that reads data from a specific column in a Microsoft Excel .xls spreadsheet file and stores it in a list for further processing."
"Generate Python code that connects to a PostgreSQL database, retrieves data from a specific table, and performs a data analysis using pandas library."
"Generate Python code that creates an OrderedSet object and adds elements in a specific order, ensuring that duplicates are not allowed and the order of insertion is preserved when iterating over the set."
"Generate Python code that filters a list of numbers to only include even numbers using the tools and utilities provided in the package."
"Generate Python code that uses the typing stubs from PyYAML to annotate a function that loads a YAML file and returns its content as a dictionary."
"Generate Python code that converts a JSON5 file containing data in JavaScript-like syntax into a standard JSON file for compatibility with other systems."
"Generate Python code that takes a Python code snippet as input and outputs the abstract syntax tree of the code, with support for type inference."
"Generate Python code that encodes HTTP headers using the HPACK algorithm in a purely Pythonic way, without relying on external libraries."
"Generate Python code that uses the CUBLAS native runtime libraries to perform matrix multiplication on two large matrices stored on the GPU."
"Generate Python code that parses HTTP/2 frames using only native Python code, without relying on any external libraries."
"Generate Python code that utilizes CUSPARSE native runtime libraries to perform sparse matrix operations for efficient computation on NVIDIA GPUs."
"Generate Python code that retrieves and displays logs from a Google Cloud App Engine project using the Appengine Logging API client library."
"Generate Python code that establishes an HTTP/2 connection and sends a GET request to a specific URL, then prints out the response received from the server."
"Generate Python code that configures the logging module to display log messages in different colors based on their severity levels, such as red for errors, yellow for warnings, and green for info messages."
"Generate Python code that initializes and configures a JupyterLab server with custom server components for enhanced functionality and user experience in JupyterLab-like applications."
"Generate Python code that compares two Python objects and identifies the differences between them, then recreates one object by applying the identified deltas from the other object."
"Generate Python code that opens a Chrome browser using Selenium WebDriver, navigates to a specified URL, fills out a form with given data, submits the form, and captures the resulting page source."
"Generate Python code that converts a Pandas DataFrame to a format compatible with SQL systems like BigQuery or Spanner, including handling data types and column mappings for seamless integration."
"Generate Python code that creates a WebSocket client implementing a state-machine based protocol for establishing a connection, sending and receiving messages, and handling various states such as connecting, open, closing, and closed."
"Generate Python code that connects to a Microsoft Azure File DataLake Storage account, creates a new directory, uploads a file to that directory, and then lists the contents of the directory."
"Generate Python code that calculates and prints the Fibonacci sequence up to the 10th number using a recursive function."
"Generate Python code that utilizes the NVIDIA Collective Communication Library (NCCL) Runtime to implement efficient data communication and synchronization operations among multiple GPUs in a distributed computing environment."
"Generate Python code that connects to a Snowflake database using Snowpark for Python and executes a query to retrieve data from a specific table."
"Generate Python code that utilizes Nvidia's JIT LTO (Just-In-Time Link-Time Optimization) library to dynamically optimize and compile Python code for improved performance on Nvidia GPUs."
"Generate Python code that takes a Python script as input, uses the pasta library to parse and analyze the Abstract Syntax Tree (AST) of the script, and performs automated code refactoring based on the identified patterns and rules in the AST."
"Generate Python code that creates a list of fake names along with their corresponding email addresses using the Faker package."
"Generate Python code that converts a pandas dataframe into a compatible format for other dataframe libraries, ensuring seamless interoperability between different dataframe libraries."
"Generate Python code that dynamically checks the types of variables at runtime to ensure they match the specified data types using the type hints provided in the code."
"Generate Python code that utilizes cuDNN runtime libraries to accelerate deep learning model training on Nvidia GPUs."
"Generate Python code that converts a color value from an HTML or CSS format to another supported color format within the library, such as RGB, HSL, or hexadecimal."
"Generate Python code that utilizes the common libraries from Abseil to implement a robust logging system with structured logs and automatic log rotation for a web application."
"Generate Python code that scans a given Python script file and identifies any potential syntax errors or code quality issues using a static analysis technique."
"Generate Python code that creates a bar chart using Vega-Altair to visualize the distribution of a given dataset with statistical information such as mean, median, and standard deviation displayed on the chart."
"Generate Python code that authenticates with the Stackdriver Logging API client library using OAuth 2.0 credentials and retrieves the latest log entries from a specified log stream."
"Generate Python code that utilizes the CUFFT native runtime libraries to perform fast Fourier transform operations on a given input array and outputs the transformed data."
"Generate Python code that utilizes the CUDA solver native runtime libraries to accelerate the solution of linear algebraic equations on a GPU."
"Generate Python code that iterates over datetime objects using a cron-like format to schedule recurring tasks or events."
"Generate Python code that logs detailed information from a Python application, such as timestamp, log level, source file, line number, and custom message, in a structured format for easy analysis and troubleshooting."
"Generate Python code that uses the CUDA profiling tools runtime libraries to measure and analyze the performance of a specific CUDA-accelerated application or function, providing insights into GPU utilization, memory usage, and kernel execution times."
"Generate Python code that utilizes the CURAND native runtime libraries to generate random numbers following a specific distribution and store them in an array for further processing."
"Generate Python code that locks a file using the portalocker package to prevent other processes from accessing it simultaneously."
"Generate Python code that sends a specific file, specified by its file path, to the trash on Mac OS X, Windows, or Linux based on the operating system the code is running on."
"Generate Python code that utilizes CUDA Runtime native libraries to perform matrix multiplication on GPU for faster computation."
"Generate Python code that compiles CUDA code at runtime using NVRTC native runtime libraries and executes it on the GPU."
"Generate Python code that retrieves a specific secret from Microsoft Key Vault using the Key Vault Secrets Client Library and prints its value to the console."
"Generate Python code that checks if a given fully-qualified domain name is valid according to RFC 1123 standards, ensuring it meets the requirements for compatibility with modern browsers."
"Generate Python code that changes the process title of a Python script to a specific custom title using the functionalities provided by the module."
"Generate Python code that calculates the result of adding two ISO 8601 durations together and returns the result in ISO 8601 format."
"Generate Python code that creates a mock for a GET request using the `requests_mock` library, simulating a successful response with a specific status code, headers, and body content."
"Generate Python code that establishes a connection to an SSE server using HTTPX and continuously listens for incoming messages, processing and displaying each message as it is received."
"Generate Python code that uses the RFC 6570 URI Template Processor package to expand a URI template with provided variables and return the resulting URI."
"Generate Python code that reads data from a CSV file, applies transformations to the data using Apache Beam SDK, and writes the transformed data to a BigQuery table."
"Generate Python code that sets up a new AWS Lambda function using Powertools for AWS Lambda, implementing best practices for serverless development and maximizing developer efficiency."
"Generate Python code that creates an OAuth server which authenticates users using OpenID Connect and issues access tokens for secure API authentication."
"Generate Python code that automatically identifies and updates deprecated code within a project using the library for automated deprecations."
"Generate Python code that subscribes to a specific topic in an Apache Kafka cluster using Confluent's Python client, and continuously consumes messages from that topic in real-time."
"Generate Python code that establishes a Tornado websocket backend to seamlessly integrate the Xterm.js Javascript terminal emulator library for real-time terminal sessions."
"Generate Python code that implements a simple LRU cache using asyncio, allowing for efficient caching and retrieval of data in an asynchronous environment."
"Generate Python code that utilizes ANTLR 4.13.2 runtime to parse and analyze a given input text using a specified grammar."
"Generate Python code that creates an interactive scatter plot using the data visualization library, allowing users to zoom in and out, pan across the plot, and see tooltips with additional information when hovering over data points."
"Generate Python code that sets up a basic logging configuration to log messages with different levels (INFO, ERROR, DEBUG) to a file named 'app.log' in the current working directory, with a simple and straightforward format including the timestamp, log level, and message."
"Generate Python code that creates a Jupyter notebook widget with a dropdown menu that allows users to select from a list of options and updates a corresponding output based on the selected option."
"Generate Python code that validates whether a given URL conforms to the RFC3986 standard using only pure Python implementation."
"Generate Python code that trains a machine learning model using the specified dataset on Amazon SageMaker and then deploys the trained model for real-time predictions."
"Generate Python code that creates a shim layer to handle notebook traits and configuration settings, allowing seamless integration and communication between different components within a Jupyter notebook environment."
"Generate Python code that utilizes adapter protocols to integrate dbt-core with a specific SQL database for executing queries and managing data transformations."
"Generate Python code that creates a Jupyter interactive widget to allow users to input their age and calculate their birth year based on the current year."
"Generate Python code that automatically pluralizes a given word using the rules of the Ruby on Rails inflector, allowing developers to easily handle pluralization tasks in their Python projects."
"Generate Python code that reads an image file in PNG format, performs a color manipulation operation, and then saves the modified image as a JPEG file using the capabilities of the library for image processing and data format conversions."
"Generate Python code that compiles custom Deep Learning operations using the provided language and compiler package."
"Generate Python code that creates a JupyterLab notebook with interactive widgets that allow users to manipulate and visualize data in real-time."
"Generate Python code that checks the reasonableness of a given set of inputs for a specific mathematical model, providing feedback on whether the inputs fall within a reasonable range of values."
"Generate Python code that creates a custom event handler using the Jupyter Event System library to listen for specific events triggered within a Jupyter notebook and execute a specified function in response to those events."
"Generate Python code that loads the "IMDB" dataset from the HuggingFace library and preprocesses it for sentiment analysis using a transformer model."
"Generate Python code that validates a user's input data against predefined rules and returns a list of errors for any invalid data entries."
"Generate Python code that establishes an SSH tunnel between a local port and a remote host using the package's pure Python implementation."
"Generate Python code that validates a given URI reference string according to the specifications outlined in RFC 3986."
"Generate Python code that initializes a Prometheus metric exporter for OpenTelemetry to continuously scrape and export metrics from your application for monitoring and analysis."
"Generate Python code that signs a message using the ECDSA cryptographic signature algorithm from the provided pure Python library."
"Generate Python code that establishes a connection to a BigQuery database using SQLAlchemy and executes a query to retrieve data from a specific table."
"Generate Python code that connects to an ODBC database using the DB API module and executes a SELECT query to retrieve data from a specific table."
"Generate Python code that connects to a Delta Lake table in Apache Spark, reads the data from the table, performs a data transformation operation, and then writes the transformed data back to the Delta Lake table."
"Generate Python code that authenticates a user through OAuth 2.0 using this library, retrieves an access token, and makes a GET request to a specified resource endpoint."
"Generate Python code that utilizes the click extension module to create a CLI command registration system that automatically registers commands using setuptools entry-points."
"Generate Python code that applies a retry decorator to a function that makes an API call, retrying up to 3 times with a delay of 5 seconds between each attempt, and logging any exceptions raised during the retries."
"Generate Python code that converts a simple arithmetic expression, such as "3 + 4 * 2", into LLVM intermediate representation for compilation."
"Generate Python code that uses the platformdirs module to determine the appropriate directory for storing user-specific data on the current platform."
"Generate Python code that authenticates a user with their Azure credentials and retrieves a list of all virtual machines in their Azure account."
"Generate Python code that creates a box plot to visualize the distribution of a dataset, including outliers and quartile ranges, using the seaborn library."
"Generate Python code that trains a Gradient Boosting model using the XGBoost package, tunes the hyperparameters using cross-validation, and evaluates the model's performance on a test dataset."
"Generate Python code that defines type hints for protobuf messages using the typing module."
"Generate Python code that visualizes the flow of tensors in a neural network using TensorBoard for real-time monitoring and analysis."
"Generate Python code that uses the coroutine-based network library to asynchronously fetch data from multiple URLs and print the response content for each request."
"Generate Python code that serializes and deserializes data using the FlatBuffers serialization format, including defining schema, creating buffers, and accessing data fields."
"Generate Python code that creates a progress bar to visually display the progress of a long-running operation, updating in real-time as the operation progresses."
"Generate Python code that authenticates with the Tableau Server REST API, retrieves a list of workbooks, and downloads a specific workbook as a .twb file to the local machine."
"Generate Python code that installs the Jupyter Server Extension for Terminals and starts a new terminal session within a Jupyter notebook environment."
"Generate Python code that imports the shared common utilities package for dbt-core and adapter implementations, and demonstrates how to use a specific utility function from the package in a custom script to optimize database interactions."
"Generate Python code that utilizes the library to perform asynchronous tasks such as fetching data from multiple URLs concurrently and processing the results in an efficient manner."
"Generate Python code that retrieves the current time and date in a specific timezone using the Olson timezone database."
"Generate Python code that connects to Google BigQuery using the pandas library, retrieves data from a specific table, and loads it into a pandas DataFrame for further analysis."
"Generate Python code that creates a lazy object proxy that efficiently delays the instantiation of an object until it is actually needed, allowing for optimized performance and reduced memory usage in the program."
"Generate Python code that authenticates with the Google Cloud Dataproc API using service account credentials and creates a new Dataproc cluster with specific configuration settings."
"Generate Python code that establishes a connection to a Microsoft SQL Server database using the new Cython-based version of the DB-API interface, executes a SQL query to fetch data from a specific table, and prints the results to the console."
"Generate Python code that imports the LangChain package and utilizes a specific community-contributed integration to perform sentiment analysis on a given text input."
"Generate Python code that extracts and parses audit logs from Google Cloud Platform services using the Google Cloud Audit Protos package."
"Generate Python code that sends a text message to a specified phone number using the messaging library, including the necessary authentication and message content."
"Generate Python code that establishes a connection to a PostgreSQL database using psycopg2 and executes a query to retrieve data from a specific table."
"Generate Python code that configures the logging module to output colored messages in the terminal for different severity levels, such as errors in red, warnings in yellow, and info messages in green."
"Generate Python code that compiles a simple Python function into LLVM Intermediate Representation (IR) using the basic LLVM functionality provided by the wrapper."
"Generate Python code that utilizes the Ninja build system to compile a C++ project with optimized speed settings and outputs the executable file to a specified directory."
"Generate Python code that creates a WebSocket proxy server to handle communication between a Jupyter Notebook/Lab server and multiple client languages, allowing for seamless interaction and data exchange across different programming environments."
"Generate Python code that creates a web application using the high-level Python web framework provided, with routes for different pages and templates for a clean and pragmatic design."
"Generate Python code that authenticates a Python application to Azure Active Directory (AAD) using the ADAL for Python library in order to access AAD protected web resources."
"Generate Python code that demonstrates how to utilize the `unittest.mock` functionality on older versions of Python by using the `mock` package as a backport, allowing for seamless mocking and testing capabilities across different Python versions."
"Generate Python code that resolves a given variable name to an object within the current scope."
"Generate Python code that utilizes the Python Utils module to convert a list of strings to uppercase and remove any duplicates, then sorts the list in ascending order and prints the result."
"Generate Python code that automates the creation of virtual environments, installs necessary packages, sets up project structure, and initializes version control for a seamless and efficient Python development workflow."
"Generate Python code that utilizes the NVIDIA Tools Extension package to analyze and visualize GPU performance metrics for a specific CUDA application."
"Generate Python code that retrieves monitoring data from Google Cloud Monitoring API for a specific project and displays real-time metrics such as CPU utilization, memory usage, and network traffic."
"Generate Python code that creates a Thrift client to communicate with a remote server using the Apache Thrift RPC system, sending and receiving data between the client and server."
"Generate Python code that reads data from an existing HDF5 file, extracts specific datasets, and writes the extracted data into a new HDF5 file."
"Generate Python code that uses the Google Cloud Vision API client library to analyze an image and extract information such as labels, text, faces, and landmarks from the image."
"Generate Python code that tokenizes a given text using an unsupervised text tokenizer and then detokenizes the tokens back into the original text."
"Generate Python code that creates a distributed task queue system using the package, allowing for efficient distribution and management of tasks across multiple workers in a network environment."
"Generate Python code that uses the Google Cloud Kms API client library to encrypt a sensitive piece of data using a specified key in the Google Cloud Key Management Service."
"Generate Python code that establishes a secure TLS (SSL) connection using the OS crypto libraries for key generation, encryption, and decryption, while also including signing, verification, and key derivation functions, ensuring cross-platform compatibility on Windows, OS X, and Linux/BSD without the need for a compiler."
"Generate Python code that creates a new task in Google Cloud Tasks API with a specified payload, target URL, schedule time, and queue name."
"Generate Python code that calculates the xxHash checksum of a given input data using the xxHash package."
"Generate Python code that sets up a virtual environment using tox and runs specified tests within that virtual environment."
"Generate Python code that utilizes Pygments lexers to highlight IPython code snippets in a Jupyter notebook."
"Generate Python code that discovers and loads entry points from all installed packages in the Python environment."
"Generate Python code that uploads a batch of files to Google Cloud Storage using the Google Cloud Batch API client library."
"Generate Python code that captures the return values of multiple function calls and stores them in a list for further processing or analysis."
"Generate Python code that compresses a given text string using the Brotli compression library and saves the compressed data to a file."
"Generate Python code that utilizes the modern parsing library to extract specific data fields from a JSON file and store them in a CSV file for further analysis."
"Generate Python code that uses the Google Cloud Dlp API client library to scan a text document for potentially sensitive information such as social security numbers, credit card numbers, and personal addresses, and returns a report with the findings and recommendations for redaction."
"Generate Python code that utilizes the LangChain package to split a given text into separate linguistic components such as words, phrases, or sentences for further analysis or processing."
"Generate Python code that allows you to fetch data from a Google Cloud BigQuery table using the BigQuery Storage API client library."
"Generate Python code that creates a directed graph representing a parallel computing task with nodes representing different components and edges representing dependencies between them, and then executes the task on a heterogeneous computing platform using parallel processing techniques."
"Generate Python code that automatically retries a specified function with exponential backoff when it encounters exceptions, with a maximum number of retry attempts and customizable wait intervals between retries."
"Generate Python code that sends a SOAP request to a specified endpoint URL, includes custom SOAP headers, and parses the response to extract specific data."
"Generate Python code that imports the pytz module and uses type hints to declare a function that takes a datetime object and returns the timezone-aware equivalent using pytz's timezone localization."
"Generate Python code that imports the package's stemmer for the English language and demonstrates how to use it to stem a given input text."
"Generate Python code that utilizes the traceback serialization library to convert a traceback object into a JSON serializable format for easy storage or transmission."
"Generate Python code that transcribes an audio file to text using the Google Cloud Speech API client library."
"Generate Python code that uses the package to mock the system time in order to test time-dependent functions or scenarios within a Python script."
"Generate Python code that efficiently reads and writes data from AVRO files using the package's fast processing capabilities."
"Generate Python code that utilizes the awscrt package to create a client for interacting with Amazon Web Services (AWS) using type annotations and code completion features for improved development workflow."
"Generate Python code that establishes a connection to an AMQP (Advanced Message Queuing Protocol) server using the low-level AMQP client, sends a message to a specified queue, and then receives and prints out any messages available in that queue."
"Generate Python code that creates a list of all the promises made in a given text file, and then prints out each promise along with the line number it appears on."
"Generate Python code that utilizes type annotations for botocore functions and enables code completion for AWS SDK operations."
"Generate Python code that loads an image using OpenCV python bindings, applies a Gaussian blur filter, converts the image to grayscale, and displays the processed image."
"Generate Python code that reads a configuration file using the flexible configuration library and prints out all the key-value pairs within the file."
"Generate Python code that utilizes the multiprocessing module with the improvements and bugfixes included in this package to parallelize the execution of a CPU-intensive task across multiple processes for improved performance."
"Generate Python code that recursively searches through a specified directory for all files with a specific file extension and compiles them into a single build output file."
"Generate Python code that splits a large dataset into multiple chunks and distributes the processing of each chunk across multiple Python processes in parallel."
"Generate Python code that utilizes the git-like *did-you-mean* feature from the click package to suggest possible command corrections when a user enters a typo in a command line interface."
"Generate Python code that uploads a local file to Aliyun OSS (Object Storage Service) bucket, using the Aliyun OSS SDK, while also setting custom metadata for the uploaded file."
"Generate Python code that integrates with the Google Cloud Workflows API to create a new workflow, add a series of tasks with specified parameters and dependencies, and execute the workflow."
"Generate Python code that authenticates a user to Google APIs using PyData helpers for seamless access to Google services in data analysis and manipulation tasks."
"Generate Python code that compares two version strings using the Semantic Versioning (SemVer) scheme and returns whether the first version is greater than, equal to, or less than the second version."
"Generate Python code that creates a directed graph using the Graphviz package, with nodes representing different elements and edges indicating relationships between them, and then visualizes the graph as a PNG image."
"Generate Python code that lists all the virtual machine instances in a specified Google Cloud Compute project using the Google Cloud Compute API client library."
"Generate Python code that establishes a WebSocket connection using the Trio library and sends a message to a specified WebSocket server."
"Generate Python code that uses the Google Analytics Admin API client library to retrieve a list of all Google Analytics user links for a specified Google Analytics account ID."
"Generate Python code that connects to a Google Cloud Bigtable instance, retrieves data from a specific row and column family, and updates the data in a specific cell within that row."
"Generate Python code that utilizes the Google Cloud Language API client library to perform sentiment analysis on a given text input and returns the sentiment score and magnitude."
"Generate Python code that creates a concrete syntax tree representation of a Python 3.0 through 3.13 program, allowing for manipulation and analysis of the AST-like properties within the program."
"Generate Python code that creates a GraphQL server with a defined schema, resolvers for queries and mutations, and a connection to a database for data retrieval and manipulation."
"Generate Python code that creates a neural network model using TensorFlow for image classification with the MNIST dataset."
"Generate Python code that sanitizes an HTML string using the Ammonia HTML sanitizer Rust crate, ensuring that the output is safe for display in a web page."
"Generate Python code that uploads a local file to a specific bucket in Google Cloud Storage."
"Generate Python code that serializes a dictionary object into a JSON string using the fast and well-tested serialization library."
"Generate Python code that retrieves data from a specific Google Spreadsheet using the Google Spreadsheets Python API and prints out the contents of the spreadsheet."
"Generate Python code that loads and parses a set of rule configurations for debugging SageMaker training jobs using the SMDebug RulesConfig package."
"Generate Python code that uses the Relay library to create a GraphQL schema that supports pagination and cursor-based navigation for querying and mutating data."
"Generate Python code that utilizes type annotations for s3transfer to ensure accurate code completion when transferring files to and from Amazon S3."
"Generate Python code that creates a graph database using Apache TinkerPop and performs a Gremlin query to retrieve all vertices connected to a specific vertex."
"Generate Python code that uses the Google Cloud Video Intelligence API client library to analyze a video file and extract information such as labels, shots, and explicit content detection."
"Generate Python code that extracts all the hyperlinks (anchor tags) from a given HTML document using the WHATWG HTML specification parser."
"Generate Python code that schedules and runs dbt projects within Airflow, including setting up DAGs and tasks to orchestrate the entire data transformation process."
"Generate Python code that uses type annotations from boto3 1.40.12 to interact with AWS services and is checked for type correctness using mypy."
"Generate Python code that utilizes the REPL plugin for Click to create an interactive command-line interface for a Python script, allowing users to input commands and receive real-time feedback and responses."
"Generate Python code that analyzes a dataset and automatically generates a report detailing the data types, missing values, outliers, and summary statistics to provide a clear understanding of the data."
"Generate Python code that authenticates a user with the Google Cloud OS Login API and retrieves a list of authorized SSH keys for the specified user."
"Generate Python code that trains a machine learning model using MLflow for tracking experiments, logging metrics, and managing the complete lifecycle of the model, including versioning and deploying."
"Generate Python code that connects to the Google Cloud Dataform API, retrieves a list of all datasets available, and prints out the names of these datasets."
"Generate Python code that converts Unicode text containing non-ASCII characters into ASCII transliterations for easy readability and processing."
"Generate Python code that analyzes a dataset and presents the results in a visually appealing and easy-to-understand format for non-technical users."
"Generate Python code that authenticates to a HashiCorp Vault server using the API client and retrieves a secret stored in the vault."
"Generate Python code that converts a given number of seconds into a human-readable format, such as "1 day, 3 hours, 15 minutes, and 30 seconds"."
"Generate Python code that authenticates a client to access the Google Ads API and retrieves a list of all campaigns associated with the account."
"Generate Python code that retrieves data from a Redis instance in Google Cloud using the Google Cloud Redis API client library and stores it in a local variable for further processing."
"Generate Python code that instruments a FastAPI application with OpenTelemetry for distributed tracing and metrics collection."
"Generate Python code that takes a list of dictionaries containing tabular data and displays it in a visually appealing ASCII table format using the simple Python library."
"Generate Python code that creates an event handler class with methods for adding, removing, and invoking event subscribers, allowing for elegant event-driven programming in Python similar to C# EventHandler."
"Generate Python code that utilizes the integration package to retrieve data from OpenAI and process it using LangChain for natural language understanding and generation tasks."
"Generate Python code that sends an email using Twilio SendGrid library, including setting up the necessary authentication credentials and constructing the email with custom content and recipient information."
"Generate Python code that connects to an Azure Cosmos database using the client library and retrieves all documents from a specific collection."
"Generate Python code that configures a Flask application to handle Cross-Origin Resource Sharing (CORS) by simplifying the setup and management of CORS policies for handling requests from different origins."
"Generate Python code that connects to the Google Cloud Memcache API, retrieves a list of all available Memcache instances, and displays their details including name, location, and status."
"Generate Python code that instruments an ASGI application using OpenTelemetry to track and trace requests and responses for monitoring and observability purposes."
"Generate Python code that encodes a Python dictionary into a JSON string using the ultra fast JSON encoder provided by the package."
"Generate Python code that takes a user input string representing a time expression (e.g. "tomorrow at 3pm" or "next week on Monday at 10am") and parses it to extract the corresponding date and time information."
"Generate Python code that locks a file on a platform-independent basis to prevent concurrent access or modifications by multiple processes or threads."
"Generate Python code that creates a custom event emitter class with the ability to emit and listen for events, similar to Node.js's EventEmitter, and includes additional unique features specific to this package."
"Generate Python code that uses the property-based testing library to test a function that calculates the factorial of a number, ensuring that the result is always a positive integer."
"Generate Python code that utilizes the Python for Windows Extensions package to create a script that allows for the manipulation of Windows-specific functionalities such as accessing and controlling Windows services or interacting with the Windows Registry."
"Generate Python code that takes a README file from a Python package stored in Warehouse and renders it using the readme_renderer library."
"Generate Python code that iterates through a JSON file and returns each key-value pair as a tuple using the standard Python iterator interfaces."
"Generate Python code that uses the linter package to identify and report any syntax errors or formatting issues in a specified YAML file."
"Generate Python code that customizes the appearance of Sphinx documentation by using the light and configurable theme provided by the package."
"Generate Python code that connects to the Google Cloud Bigquery Datatransfer API and transfers data from a specified data source to a BigQuery dataset."
"Generate Python code that connects to a Google Cloud Spanner instance, retrieves specific data from a specified table, and updates the records based on a defined condition."
"Generate Python code that authenticates with Salesforce.com REST API and retrieves a list of all accounts from the Salesforce database."
"Generate Python code that dynamically generates an abstract syntax tree (AST) representation of Python code, taking into account the differences between various Python versions for compatibility and abstraction purposes."
"Generate Python code that retrieves the ISO country code, subdivision code, language code, currency code, and script code along with their corresponding translations in multiple languages."
"Generate Python code that creates a mock AWS infrastructure for testing purposes, including mocking out AWS services such as S3, DynamoDB, and Lambda functions."
"Generate Python code that establishes a secure connection between Google VertexAI and LangChain for seamless data transfer and model deployment."
"Generate Python code that retrieves the dimensions (width and height) of a PNG, JPEG, JPEG2000, or GIF file."
"Generate Python code that establishes an asynchronous connection to a PostgreSQL database using the asyncio PostgreSQL driver and executes a SQL query to retrieve data from a specific table."
"Generate Python code that performs a deep merge operation on two dictionaries, combining their key-value pairs including nested dictionaries, lists, and other data structures into a single merged dictionary."
"Generate Python code that loads an image dataset using the torchvision package and trains a convolutional neural network model in PyTorch for object detection on the dataset."
"Generate Python code that creates a new MLflow experiment, logs training metrics, and saves the trained model, all within the MLflow platform for managing the complete machine learning lifecycle."
"Generate Python code that connects to an Azure Data Lake Store account, lists all files in a specific directory, retrieves metadata for each file, and downloads a selected file to the local filesystem."
"Generate Python code that calculates the mean, median, mode, and standard deviation of a given dataset using statistical computations and models for Python."
"Generate Python code that utilizes the sphinxcontrib-serializinghtml extension to create serialized HTML files in both JSON and pickle formats from Sphinx documentation."
"Generate Python code that authenticates a user with the Weights & Biases API, retrieves experiment data, and allows for data analysis and visualization using the functionalities provided by the package."
"Generate Python code that signs a request using AWS signature version 4 for authentication with AWS services when making HTTP requests using the Python requests module."
"Generate Python code that connects to the Google Cloud AutoML API, uploads a dataset, trains a model using AutoML, and then makes predictions on new data using the trained model."
"Generate Python code that creates an event publishing system with the ability to subscribe to events, publish events, and handle event notifications."
"Generate Python code that connects to a Google Cloud BigQuery project, queries a specific dataset for certain data, and then saves the results to a local file."
"Generate Python code that utilizes the Rich package to create a command-line application with colorful and interactive user interface elements such as tables, progress bars, and syntax highlighting."
"Generate Python code that authenticates with the Looker REST API, retrieves a list of all available looks, and prints out the metadata for each look including its ID, title, and description."
"Generate Python code that uses the NVIDIA cuSPARSELt package to perform sparse matrix-vector multiplication on a large sparse matrix and a vector, utilizing the power of NVIDIA GPUs for accelerated computation."
"Generate Python code that extracts and displays metadata for test sessions using the pytest plugin."
"Generate Python code that creates a DataFrame using the Blazingly fast DataFrame library and performs a groupby operation to calculate the mean value of a specific column."
"Generate Python code that automatically generates a CMakeLists.txt file to build and package a Python software project across multiple platforms using the CMake tool."
"Generate Python code that uses the typing stubs for urllib3 to annotate a function that makes a GET request to a specified URL and returns the response data."
"Generate Python code that connects to the Google Cloud Orchestration Airflow API, retrieves a list of all DAGs (Directed Acyclic Graphs), and prints out the names of the DAGs along with their current status."
"Generate Python code that connects Apache Airflow to Snowflake to enable seamless data integration and processing using the apache-airflow-providers-snowflake package."
"Generate Python code that utilizes the Google Cloud Text-to-Speech API client library to convert a given text input into speech output with customizable voice and audio settings."
"Generate Python code that integrates the SSE (Server-Sent Events) plugin into a Starlette application to allow real-time server push communication with clients."
"Generate Python code that retrieves a list of all metadata databases from a Google Cloud Dataproc Metastore instance using the Metastore API client library."
"Generate Python code that utilizes the wrapper provided in this package to make a GET request to a specified API endpoint and extracts specific data from the JSON response."
"Generate Python code that defines a statistical model using the specified package and creates a design matrix for the model based on given data."
"Generate Python code that authenticates a user with their Azure credentials, retrieves a list of all resources in a specified Azure subscription, and then updates the properties of a specific resource using the Azure Resource Management Client Library for Python."
"Generate Python code that fetches data from the anthropic API using the official Python library and displays the results in a user-friendly format."
"Generate Python code that takes a user-inputted text containing a date or time in a human-readable format and parses it to return the corresponding datetime object."
"Generate Python code that creates a web application using the Flask framework with automatic CRUD generation for models, detailed security features, and integration of Google charts for data visualization."
"Generate Python code that automates the process of creating a PyPI package, including setting up package metadata, versioning, and uploading the package to PyPI for distribution."
"Generate Python code that utilizes type annotations from boto3 S3 1.40.0 service, generated with mypy-boto3-builder 8.11.0, to interact with S3 buckets, list objects in a specific bucket, and upload a file to a designated bucket while ensuring type safety."
"Generate Python code that utilizes the sphinxcontrib-htmlhelp extension to generate HTML help files from Sphinx documentation."
"Generate Python code that utilizes the pytest plugin to automatically detect and abort any hanging tests that exceed a specified timeout threshold during test execution."
"Generate Python code that utilizes the sphinxcontrib-applehelp package to generate an Apple help book from a collection of Sphinx documentation files, complete with navigation and search functionalities."
"Generate Python code that utilizes the sphinxcontrib-qthelp extension to convert Sphinx documentation into QtHelp documents for a PyQt application."
"Generate Python code that utilizes the sphinxcontrib-devhelp extension to generate Devhelp documents for a Python project's documentation."
"Generate Python code that utilizes the pytest plugin to automatically re-run failed tests multiple times in order to eliminate flaky failures in the test suite."
"Generate Python code that converts a dictionary containing key-value pairs representing attributes of a data class into a data class object using the functionality provided by the package."
"Generate Python code that creates a tiny shelve-like database with concurrency support for storing and retrieving data efficiently in a multi-threaded environment."
"Generate Python code that imports a C++11 library, calls a specific function with arguments, and retrieves the return value from the C++ function to use within the Python code."
"Generate Python code that uses the high-level API to automate a web browser to open a specific URL, fill out a form with predefined data, submit the form, and then capture and save the resulting webpage content."
"Generate Python code that creates a typing stub file for a setuptools-based Python package, including type hints for all functions, classes, and variables defined within the package."
"Generate Python code that creates a Kubernetes PodOperator in Apache Airflow to deploy and manage a Kubernetes pod for running tasks or workflows within the CNCF Kubernetes environment."
"Generate Python code that uses the sphinx extension to render display math equations in HTML using JavaScript."
"Generate Python code that defines a callback function to handle a specific event triggered by an API, taking in parameters as specified in the API documentation and performing a desired action within the function."
"Generate Python code that connects to the Google Cloud Firestore API, retrieves data from a specific collection, and updates a specific document within that collection."
"Generate Python code that authenticates a user with Google Cloud using OAuth 2.0 credentials and retrieves an access token for accessing Google Cloud services."
"Generate Python code that creates a bar chart using the package's easy-to-use functionalities, allowing users to visually represent data for a broad audience with varying levels of technical proficiency."
"Generate Python code that implements rate limiting functionality for sending HTTP requests to a specified API, restricting the number of requests to a maximum of 100 per minute."
"Generate Python code that extracts and analyzes the Jinja templates used in dbt projects to identify all variables and macros being utilized in the project."
"Generate Python code that utilizes the caching decorator to store and retrieve computed properties in a class efficiently."
"Generate Python code that retrieves metadata information from Google Cloud Datacatalog using the API client library."
"Generate Python code that connects to an Apache Kafka server, subscribes to a specific topic, consumes messages from that topic, and processes them using pure Python without any external dependencies."
"Generate Python code that utilizes the Model Context Protocol SDK to retrieve model metadata and execution context information for a machine learning model deployed in a production environment."
"Generate Python code that creates a SQLite database connection and executes SQL queries within an Apache Airflow DAG using the apache-airflow-providers-sqlite package."
"Generate Python code that utilizes the markdown-it-py package to convert a markdown string to HTML with custom plugins applied for syntax highlighting and emoji support."
"Generate Python code that automatically updates the versions of all dependencies listed in a requirements.in file using pip-tools to ensure that the pinned dependencies are always up to date."
"Generate Python code that establishes a connection to a MySQL database, retrieves data from a specific table, and then updates a record within that table with new information."
"Generate Python code that connects to a PostgreSQL database, retrieves data from a specific table, manipulates the data using Python, and then inserts the modified data back into the same table."
"Generate Python code that utilizes the Datadog APM client library to instrument your Python application for performance monitoring and tracing."
"Generate Python code that signs a JSON Web Token (JWT) using the JOSE implementation to ensure secure authentication and data integrity."
"Generate Python code that initializes a FastAPI app using FastAPI CLI, sets up routes, handles request methods, and starts the server from the command line interface."
"Generate Python code that creates an asynchronous connection to an SQLite database using the asyncio bridge to the standard sqlite3 module, allowing for concurrent database operations in an efficient and non-blocking manner."
"Generate Python code that loads a pre-trained Machine Learning model in ONNX format using ONNX Runtime and performs inference on new data inputs."
"Generate Python code that invokes the py.test command as a distutils command, with automatic resolution of dependencies required for running the tests."
"Generate Python code that splits a PDF file into multiple smaller PDF files based on a specified number of pages per file, merging them back together, cropping each page to a specific dimension, and transforming the PDF files into a new format."
"Generate Python code that validates a given set of user input data against specified data validation rules and returns error messages for any invalid entries, making data validation more intuitive and user-friendly."
"Generate Python code that sends a GET request to a specified URL using the simplified HTTP REST client package, and prints out the response data received from the server."
"Generate Python code that authenticates with a specific LLM API provider, retrieves a list of available endpoints, and makes a GET request to one of the endpoints to fetch data using the library for easy interfacing."
"Generate Python code that lists all the Cloud Build triggers associated with a specific project using the Google Cloud Build API client library."
"Generate Python code that creates a Thrift client and server communication system for exchanging data between different programming languages."
"Generate Python code that efficiently loads data into TensorBoard for visualization and analysis."
"Generate Python code that lists all the containers within a specified Google Cloud project using the Google Cloud Container API client library."
"Generate Python code that utilizes parallel processing techniques to execute PyData tasks while also managing task scheduling efficiently."
"Generate Python code that dynamically generates a new function with custom bytecode instructions to perform a specific computation, such as adding two numbers together and returning the result."
"Generate Python code that mocks out responses from the requests package for testing purposes."
"Generate Python code that imports the Azure-specific AutoRest swagger generator client runtime module and uses it to interact with Azure services and resources."
"Generate Python code that imports the thin Python bindings to Rust's de/compression algorithms and applies the compression algorithm to a specified file, producing a compressed output file."
"Generate Python code that defines a custom transport class for an Elastic client library that includes utilities for handling network connections, authentication, and data serialization/deserialization."
"Generate Python code that creates an in-memory DuckDB database, creates a table with specified columns and data types, inserts data into the table, and then queries the table to retrieve results based on specific conditions."
"Generate Python code that utilizes the date parsing library to extract and parse dates from a specific HTML page, returning a list of all the parsed dates in a readable format."
"Generate Python code that translates a given text from a specified source language to a target language using the Google Cloud Translate API client library."
"Generate Python code that authenticates with the Google Cloud Dataplex API using OAuth2 credentials and retrieves a list of all registered Dataplex instances."
"Generate Python code that utilizes the argparse module to create a command-line interface that accepts user input and parses the arguments for a specified function or script."
"Generate Python code that deploys a Docker containerized application to Google Cloud Run using the Google Cloud Run API client library."
"Generate Python code that connects to a MySQL database using Apache Airflow's MySQL provider package and retrieves data from a specific table for further processing."
"Generate Python code that connects to the Google Cloud Dataflow API client, retrieves a list of current Dataflow jobs, and displays their details including job ID, status, start time, and end time."
"Generate Python code that reads configuration settings for a Flask application from environment variables and sets them accordingly for seamless deployment and management."
"Generate Python code that retrieves Docker credentials from the Docker credentials store API using the provided bindings."
"Generate Python code that triggers an Apache Airflow DAG to run a job on Databricks cluster using the databricks provider package."
"Generate Python code that defines a function using type annotations for pandas DataFrame inputs and outputs, ensuring strict type checking for data manipulation operations."
"Generate Python code that extracts all the 'a' tags (hyperlinks) from a given HTML document using Beautiful Soup."
"Generate Python code that retrieves the list of dependencies specified in a pyproject.toml file of a Python project and prints them out for analysis or further processing."
"Generate Python code that applies a Gaussian blur filter to an input image using the image processing package, smoothing out any noise or imperfections in the image."
"Generate Python code that optimizes the path of einsum functions by utilizing the package's built-in algorithms for efficient computation."
"Generate Python code that scrapes data from a holiday API using the Open World Holidays Framework and organizes it into a structured JSON file for analysis and visualization."
"Generate Python code that creates a task scheduler using the package, allowing for the execution of multiple tasks concurrently and efficiently managing dependencies between them."
"Generate Python code that establishes a connection to a Cloud Spanner database using SQLAlchemy dialect and performs a query to retrieve all records from a specific table."
"Generate Python code that identifies the file type of a given file using the libmagic library."
"Generate Python code that establishes an SSH connection to a remote server using Apache Airflow's SSH provider package to execute commands and transfer files securely."
"Generate Python code that utilizes the links recognition library with full unicode support to extract all URLs from a given text input."
"Generate Python code that programmatically creates a data pipeline, schedules it to run daily, and includes monitoring functionality to track the pipeline's progress and success."
"Generate Python code that dynamically creates a function that calculates the factorial of a given integer input."
"Generate Python code that rebalances an imbalanced dataset using techniques such as oversampling, undersampling, or a combination of both to improve the performance of a machine learning model."
"Generate Python code that merges two PDF files, crops them to a specific region, and transforms the resulting PDF by rotating it 90 degrees clockwise."
"Generate Python code that adds a specific directory, such as "/usr/local/bin", to the user's PATH environment variable in a cross-platform manner."
"Generate Python code that encodes a Python dictionary object into JSON format using the jsonpickle package and saves it to a file."
"Generate Python code that defines and shares semantic layer definitions for both dbt-core and MetricFlow, ensuring consistency and seamless integration between the two platforms."
"Generate Python code that lists all storage accounts within a specific Azure subscription using the Microsoft Azure Storage Management Client Library for Python."
"Generate Python code that retrieves all open issues assigned to a specific user in JIRA using the REST API."
"Generate Python code that utilizes the Pythonic argument parser to parse command line arguments for a script that calculates the average of a list of numbers provided by the user, handling cases where no numbers are provided or if non-numeric values are included in the input."
"Generate Python code that performs unit tests on a given dataset using PyDeequ to ensure data quality and integrity."
"Generate Python code that converts a Python function into Java code, allowing seamless integration of Python functions within a Java application."
"Generate Python code that validates a given OpenAPI 2.0 or OpenAPI 3 specification file to ensure it complies with the Swagger/OpenAPI standards."
"Generate Python code that loads a pre-trained machine learning model using the library and makes predictions on a given dataset, displaying the results."
"Generate Python code that leverages cuFile GPUDirect libraries to transfer data efficiently between GPU memory and storage devices without involving the CPU."
"Generate Python code that creates a Flask application with SQLAlchemy support, including setting up a database connection and defining models for tables in the database."
"Generate Python code that establishes a secure gRPC connection to a specific Google Cloud Platform service and sends a request with authentication credentials for accessing the service's resources."
"Generate Python code that takes a SQL query as input, parses it using the customizable SQL parser, and transpiles it into another SQL query according to the specified customization settings."
"Generate Python code that creates an immutable and correct URL object with specified components (scheme, host, path, query parameters, etc.) for ensuring consistent and reliable URL handling in Python applications."
"Generate Python code that takes a string input and computes the MurmurHash3 hash value for the input using the MurmurHash package."
"Generate Python code that takes a given URL as input and accurately separates its subdomain, domain, and public suffix using the Public Suffix List, including support for both public ICANN TLDs and private domains if specified."
"Generate Python code that expands a given brace expression in the style of Bash brace expansion, allowing for generating all combinations of values within the braces."
"Generate Python code that uses the apache-airflow-providers-google package to create a DAG in Apache Airflow that connects to Google Cloud Platform services, such as Google Cloud Storage or BigQuery, and performs a data transformation or data processing task."
"Generate Python code that transfers files from a local directory to a specified Google Cloud Storage bucket using the Google Cloud Storage Transfer API client library."
"Generate Python code that resolves abstract dependencies specified in a configuration file into concrete dependencies by dynamically mapping them to specific packages or modules based on predefined rules."
"Generate Python code that utilizes the distribution-building parts of Flit to create a standalone executable of a Python project with all necessary dependencies included for easy distribution and deployment."
"Generate Python code that sets up a command line interface to interact with Databricks, allowing users to easily manage, monitor, and execute tasks on their Databricks workspace."
"Generate Python code that creates a SQLAlchemy engine to connect to a PostgreSQL database, defines a table schema with specific columns and data types, and performs CRUD operations including inserting, updating, querying, and deleting records."
"Generate Python code that writes a TOML configuration file with key-value pairs representing settings for a sample application, including sections and nested dictionaries, ensuring readability and easy access for future modifications."
"Generate Python code that creates a TensorFlow Estimator model for training a deep learning neural network to classify images in the CIFAR-10 dataset using a Convolutional Neural Network architecture."
"Generate Python code that loads a micro subset of Unicode data files for linkify-it-py projects, allowing for efficient and accurate linking of URLs and email addresses in text strings."
"Generate Python code that utilizes the enhanced features of the unittest package to test the asynchronous behaviors of an asyncio library, including testing coroutine functions and handling asynchronous exceptions."
"Generate Python code that establishes a connection to a Databricks cluster using SQLAlchemy for querying and manipulating data within the cluster."
"Generate Python code that creates a well-behaved Unix daemon process using the functionalities provided by the library, ensuring proper daemonization and handling of signals."
"Generate Python code that converts a given cron expression (e.g. "*/15 * 0-5 * 1,2,3,4,5") into a human-readable format (e.g. "Every 15 minutes, between 12:00 AM and 5:59 AM, on Monday, Tuesday, Wednesday, Thursday, and Friday")."
"Generate Python code that accurately infers the file type and MIME type of a given file or buffer without relying on any external dependencies."
"Generate Python code that utilizes the package to create a new OpenID Connect (OIDC) identity with specified attributes such as username, email, and roles."
"Generate Python code that utilizes the extended pathlib API with fsspec backends to create a new directory, list all files in it, and then copy the files to a different directory."
"Generate Python code that reads an image using OpenCV python bindings and applies a Gaussian blur filter to it."
"Generate Python code that logs custom metrics and events to Amazon CloudWatch for monitoring and analyzing the performance of your application in real-time."
"Generate Python code that establishes a connection to an Oracle Database, queries a specific table for a set of data, and then updates a particular column with new values based on specified conditions."
"Generate Python code that records and emits information from within a Python application to the AWS X-Ray service using the AWS X-Ray SDK for Python."
"Generate Python code that takes a user-input phone number, validates it according to international phone number standards using Google's common library, and returns a message indicating whether the number is valid or not."
"Generate Python code that computes the edit distance between two given strings and outputs the similarity score based on the Levenshtein distance algorithm."
"Generate Python code that creates a simple ASCII table displaying a list of items with specific headers and customizable column widths."
"Generate Python code that creates a disk-backed persistent cache system, allowing for efficient storage and retrieval of data from files on disk."
"Generate Python code that connects to a specific Azure Service Bus instance, creates a queue, sends a message to the queue, receives and processes messages from the queue, and deletes the queue after processing."
"Generate Python code that connects to a Pinot database using the Python DB-API and executes a query to retrieve data using SQLAlchemy dialect."
"Generate Python code that utilizes the multi-backend capabilities of Keras to create a deep learning model that can seamlessly switch between different backend engines such as TensorFlow, Theano, and CNTK for efficient training and deployment."
"Generate Python code that initializes the OpenTelemetry WSGI middleware to automatically trace and collect telemetry data from web applications using the WSGI protocol."
"Generate Python code that utilizes ml_dtypes to create custom data types for representing categorical variables and missing values in a machine learning dataset."
"Generate Python code that dynamically loads and executes a plugin module named 'my_plugin.py' within your Python application, allowing for seamless integration and customization of functionality."
"Generate Python code that connects to the Microsoft Azure Batch service, creates a job, adds tasks to the job, and submits the job for execution."
"Generate Python code that retrieves and displays detailed information about the CPU, including the number of cores, clock speed, architecture, and cache size, using only pure Python without any external dependencies."
"Generate Python code that implements user authentication and session management in a Flask application, allowing users to register, log in, log out, and maintain session data securely."
"Generate Python code that extracts text data from a PDF document, performs analysis to identify key information, converts the extracted data into a structured format, and manipulates the content based on specific criteria."
"Generate Python code that collects statistics from multiple sources and integrates distributed tracing functionality to monitor the flow of requests across a distributed system."
"Generate Python code that creates a thread-safe lock using the locks provided by the package and demonstrates its usage in a multi-threaded application to prevent race conditions."
"Generate Python code that uses the Accelerate package to optimize and speed up matrix multiplication operations on large arrays."
"Generate Python code that takes a graph structure as input and outputs the corresponding DOT language code using the Graphviz package."
"Generate Python code that integrates a web API into a Django project, simplifying the process and allowing for easy communication with external services."
"Generate Python code that creates a context manager using OpenCensus Runtime Context to manage the context for distributed tracing in a microservices architecture."
"Generate Python code that uses Ray to create a distributed application that performs parallel processing tasks on a cluster of machines."
"Generate Python code that interacts with Microsoft Azure Queue Storage to create a new queue, add messages to the queue, retrieve messages from the queue, and delete messages from the queue."
"Generate Python code that converts a list of singular nouns into their corresponding plural forms, adds indefinite articles to each noun, and converts a list of numbers into their ordinal forms."
"Generate Python code that retrieves a list of all Datadog Public endpoints available for monitoring and analysis using the Datadog API."
"Generate Python code that connects to the Microsoft Key Vault service, retrieves a list of all keys stored in the vault, and prints out their names and versions."
"Generate Python code that uses the wildcard/glob file name matcher to search for all files in a specified directory that have a ".txt" extension."
"Generate Python code that creates a new Microsoft Word .docx file, reads its content, updates specific sections within the file, and saves the modified document."
"Generate Python code that schedules and executes tasks within a Python program using Cron-like syntax for defining the timing and frequency of task execution."
"Generate Python code that creates an efficient array of boolean values using the C extension to optimize memory usage and performance."
"Generate Python code that reads an existing Python Abstract Syntax Tree (AST), rewrites it to implement specific modifications, and then writes the updated AST back to a Python file."
"Generate Python code that validates an OpenAPI schema against a given API endpoint to ensure compliance with the defined data structure and request/response formats."
"Generate Python code that integrates PostHog tracking functionality into a Flask web application to capture user interactions and events for analytics purposes."
"Generate Python code that creates option groups in a Click command line interface to organize and group related command line options together for better readability and usability."
"Generate Python code that loads pre-trained word embeddings, performs retrieval of similar items based on the embeddings, and reranks the retrieved items using a specific ranking algorithm."
"Generate Python code that authenticates with Microsoft Azure Container Registry and lists all available repositories."
"Generate Python code that creates a new Apache Iceberg table, adds columns with specified data types, and loads a large dataset into the table for analytics processing."
"Generate Python code that connects to a PostgreSQL database using the optimized C distribution provided by this package and retrieves a specific set of data based on a given query."
"Generate Python code that renders a form using WTForms in a Flask application, validates the form input, and implements CSRF protection to prevent cross-site request forgery attacks."
"Generate Python code that connects to a JDBC database using the specified JDBC database driver and executes SQL queries using the DB-API."
"Generate Python code that converts geographic coordinates (latitude and longitude) to projected coordinates using the PROJ library."
"Generate Python code that uses the async boto3 wrapper to asynchronously upload a file to an S3 bucket."
"Generate Python code that extracts data from various endpoints of a RESTful API and automatically generates an OpenAPI Specification (formerly known as Swagger specification) document based on the collected information."
"Generate Python code that takes a Python script file as input, calls the Pyright command line tool to perform static type checking on the script, and outputs the results to the console."
"Generate Python code that converts an Abstract Syntax Tree (AST) representation of Python code back into its original source code."
"Generate Python code that establishes a connection to Amazon Athena using the Python DB API 2.0 and executes a SQL query to retrieve data from a specific table in the Athena database."
"Generate Python code that encrypts a file using GnuPG and saves the encrypted output to a specified destination."
"Generate Python code that securely hashes a user's password using the bcrypt hashing scheme from the comprehensive password hashing framework, ensuring strong encryption for user credentials."
"Generate Python code that tokenizes a given text using advanced Natural Language Processing techniques, such as word segmentation, part-of-speech tagging, and named entity recognition, to provide detailed linguistic analysis."
"Generate Python code that utilizes the rich library to format the click help output of a command-line interface tool, enhancing the readability and visual appeal of the help information for users."
"Generate Python code that retrieves a list of open issues from a specific GitLab project using the GitLab REST API wrapper."
"Generate Python code that imports the Fab provider package for Apache Airflow and sets up a DAG that retrieves data from a Fab instance and performs data processing tasks using Airflow operators."
"Generate Python code that instruments urllib3 requests with OpenTelemetry for distributed tracing and monitoring purposes."
"Generate Python code that sets up a server using Windows Negotiate Authentication to securely authenticate client connections."
"Generate Python code that serializes and deserializes data using the Avro serialization framework."
"Generate Python code that simulates time travel in a test scenario, allowing for manipulation of time-related functions and behaviors within the test environment."
"Generate Python code that connects to the OpenLineage service, captures metadata about data pipelines, and sends this information to the OpenLineage server for tracking and monitoring purposes."
"Generate Python code that demonstrates how to serialize and deserialize data using the Avro serialization framework."
"Generate Python code that serializes a Python dictionary to JSON format and then validates the JSON data against a predefined schema using the built-in validation functionality of the library."
"Generate Python code that validates a user-submitted form data, ensuring all required fields are filled out and inputs are in the correct format, before rendering the form on a web page."
"Generate Python code that takes a formatted string as input and uses the parse() function to extract the values based on the formatting placeholders in the string."
"Generate Python code that demonstrates using the `typing` package to evaluate a type hint expression in a way that is compatible with older versions of Python, showcasing the ability to leverage newer typing features in a backward-compatible manner."
"Generate Python code that connects to a Microsoft Azure Cosmos DB instance, retrieves data from a specified collection, and performs CRUD operations such as inserting, updating, and deleting documents."
"Generate Python code that creates a class using the pathlib-style syntax to interact with a specified cloud storage service, allowing for seamless navigation, manipulation, and retrieval of files and directories stored in the cloud."
"Generate Python code that retrieves a specific certificate from Microsoft Key Vault using the Certificates Client Library and prints out the certificate details."
"Generate Python code that instruments database queries in a Flask application using OpenTelemetry to trace the performance and latency of each query and report them to a monitoring system."
"Generate Python code that performs image classification using a deep learning model built with functional programming principles and compatible with popular libraries such as TensorFlow and PyTorch."
"Generate Python code that utilizes the paramiko library to establish a secure copy (SCP) connection for transferring files between two remote servers."
"Generate Python code that creates a sorted list of unique elements from a given list using the Orderly set package."
"Generate Python code that converts a text input into its equivalent emoji representation using the Emoji for Python package."
"Generate Python code that utilizes this package to quickly build a data app with interactive features, allowing users to easily visualize and analyze data through a user-friendly interface."
"Generate Python code that defines a Kubeflow Pipeline with multiple steps including data processing, model training, and deployment using the Kubeflow Pipelines SDK."
"Generate Python code that enforces a rate limit of 100 requests per minute for a Flask application, utilizing the functionality provided by the rate limiting package."
"Generate Python code that takes a CSS3 selector and translates it to an equivalent XPath 1.0 expression using the cssselect package."
"Generate Python code that charges a customer using the Stripe API with a specified amount and currency, handling any errors and returning the charge object for further processing."
"Generate Python code that establishes a secure SFTP connection to a remote server, lists the directory contents, downloads a specified file, and uploads a new file with a friendly and user-friendly interface."
"Generate Python code that utilizes the Blis BLAS-like linear algebra library to perform matrix multiplication between two numpy arrays."
"Generate Python code that uses the Rich package to format help messages for argparse and optparse, including custom styling and formatting options."
"Generate Python code that deploys a Docker container to Microsoft Azure Container Instances using the Microsoft Azure Container Instance Client Library."
"Generate Python code that instruments a Flask application with OpenTelemetry to enable distributed tracing and monitoring of requests and responses."
"Generate Python code that connects to a Microsoft Azure Storage account, lists all the containers within the account, and retrieves the metadata for each container."
"Generate Python code that runs parameterized tests using the provided package with a specific test framework, such as pytest, and includes multiple sets of test data to ensure comprehensive test coverage."
"Generate Python code that implements a custom deep learning operation using the new flavour provided by the package to optimize model training for image classification tasks."
"Generate Python code that creates multiple asynchronous network connections and sends and receives data concurrently using the features of the highly concurrent networking library."
"Generate Python code that uses the Python Markdown extension pack to convert a Markdown file containing code blocks into an HTML file with syntax highlighting for the code snippets."
"Generate Python code that connects to a Kubernetes cluster using asynchronous methods to retrieve pod information and update their labels."
"Generate Python code that creates a customizable text user interface using the features provided by the Modern Text User Interface framework, allowing for interactive user input and dynamic display updates."
"Generate Python code that launches a Jupyter terminal console within a Jupyter notebook session, allowing for interactive command-line interactions and executions directly within the notebook environment."
"Generate Python code that creates a function registry for a library where functions can be easily registered and accessed based on specific keys."
"Generate Python code that automatically extracts the structure and frame of a Python program to create API documentation for the project, enabling users to easily understand the functionality and identify any breaking changes in the API."
"Generate Python code that analyzes a given CloudFormation template file and outputs a report highlighting areas where practices and behavior can be improved."
"Generate Python code that defines a class for representing paths in a file system, allowing for the manipulation and traversal of directory structures, including methods for creating new directories, deleting files, and listing contents within a specified path."
"Generate Python code that calculates the elapsed time in seconds using the monotonic clock for Python versions 2 and below 3.3."
"Generate Python code that securely retrieves and stores Google Auth tokens using the keyring backend to provide seamless authentication for Google services within your application."
"Generate Python code that takes two tables as input, computes the difference between them, and then creates a patch table representing the changes that need to be applied to transform the first table into the second table."
"Generate Python code that reads a Parquet file containing structured data and extracts specific columns to create a Pandas DataFrame for further analysis."
"Generate Python code that creates a sorted set of integers efficiently using the provided library for handling sorted integer sets."
"Generate Python code that automatically generates well-formatted and easily accessible documentation for a given codebase, including function descriptions, parameter details, and usage examples."
"Generate Python code that instruments a Django application with OpenTelemetry to automatically collect and export distributed traces and metrics for monitoring and observability purposes."
"Generate Python code that instruments the urllib library to automatically trace and collect telemetry data for HTTP requests made using urllib in your application."
"Generate Python code that uses the pytest plugin to run tests and generate a detailed HTML report with test results, including test names, status, and any failure messages."
"Generate Python code that dynamically imports specific functions from subpackages based on user input, allowing for efficient loading of only the required functionality."
"Generate Python code that uses the public proto bindings for dbt to interact with a data warehouse and retrieve information about tables, columns, and relationships within the database."
"Generate Python code that installs all Jupyter components in one go using the Jupyter metapackage."
"Generate Python code that creates a custom gRPC interceptor to log incoming and outgoing messages for a specific service."
"Generate Python code that creates a PDF report with customizable headers, footers, and content layout using the Reportlab Toolkit package."
"Generate Python code that extracts text content from a PDF file and then analyzes the text to identify the frequency of each word used in the document."
"Generate Python code that takes in a text input and automatically labels the human language used in the text using IETF language tags."
"Generate Python code that lists all the Azure Container Services in your Microsoft Azure account and displays their details, such as name, resource group, location, and status."
"Generate Python code that utilizes the OpenLineage common Python library to integrate data lineage tracking into an ETL pipeline, including capturing data transformations and dependencies for improved data governance and visibility."
"Generate Python code that utilizes the typing stubs for redis to declare variables and functions with type hints for interacting with redis data structures and commands."
"Generate Python code that authenticates a user's Microsoft 365 account using the Microsoft Graph Library and retrieves a list of emails from their inbox."
"Generate Python code that trains a LightGBM model on a given dataset and evaluates its performance using metrics such as accuracy, precision, recall, and F1-score."
"Generate Python code that formats and prints a list of dictionaries in a visually appealing format using the lightweight console printing and formatting toolkit, ensuring easy readability and clarity for the user."
"Generate Python code that instruments PostgreSQL database queries made using psycopg2 with OpenTelemetry to collect distributed traces and metrics for monitoring and troubleshooting purposes."
"Generate Python code that extracts all elements from an XML file using CSS selectors implemented with Python ElementTree, and displays their tag names and attributes."
"Generate Python code that utilizes ctypes or cffi to interact with Windows APIs for accessing and manipulating system resources and services, replicating functionalities similar to pywin32."
"Generate Python code that serializes a complex Python data structure into a high-performance format for efficient storage and transmission."
"Generate Python code that caches the result of a time-consuming function using one of the cache libraries from this package, ensuring that subsequent calls to the function with the same parameters retrieve the result from the cache instead of recalculating it."
"Generate Python code that compares two JSON-like structures in Python and identifies the differences between them."
"Generate Python code that creates an immutable dictionary with the keys 'name' and 'age' containing the values 'Alice' and 30, respectively, and then prints the dictionary."
"Generate Python code that creates a command-line interface using the package as a drop-in replacement for argparse, allowing users to set options through config files and environment variables seamlessly."
"Generate Python code that uses the fuzzy string matching package to compare two strings and return a similarity score between them."
"Generate Python code that efficiently manages memory allocation and deallocation for C data structures using Cython, specifically calling calloc and free functions to avoid memory leaks and ensure optimal performance."
"Generate Python code that takes a string as input and uses Cython bindings to apply MurmurHash algorithm to generate a hash value for the input string."
"Generate Python code that utilizes the core abstractions provided by the kiota generated libraries to create a REST client for interacting with a specific API endpoint, including handling authentication, request/response serialization, and error handling."
"Generate Python code that reads and parses a configuration file using an updated configparser module to ensure compatibility with earlier versions of Python."
"Generate Python code that imports the boltons package and demonstrates the usage of non-built-in functions or classes from boltons to showcase their capabilities and functionalities."
"Generate Python code that creates a DateTime object using the package provided, and then converts it to a datetime object from Python's built-in datetime module for further manipulation or comparison."
"Generate Python code that creates a deck.gl map widget with custom layers, tooltips, and interactivity, allowing users to visualize geospatial data in a web-based application."
"Generate Python code that connects to an Impala distributed query engine, executes a SQL query to retrieve data from a specific table, and then saves the results to a CSV file."
"Generate Python code that connects to a Microsoft Azure Data Table, retrieves records based on a specified query, and updates a specific record with new data."
"Generate Python code that reads a YAML file containing structured data with strict typing enforcement, ensuring that all values adhere to their specified data types as defined in the YAML schema."
"Generate Python code that establishes an SSH connection to a remote server, executes a specified command, and retrieves the output for further processing or analysis."
"Generate Python code that reads a TIFF file named "input.tif" and extracts its content, then writes the extracted data into a new TIFF file named "output.tif"."
"Generate Python code that lists all files and folders in a specified Azure Data Lake Store account using the management client library provided by Microsoft Azure."
"Generate Python code that defines a JSONSchema specification with object-oriented paths for validating a complex nested JSON structure."
"Generate Python code that creates a time-based UUID using the new format provided by the package, specifically designed for use as a primary key in a database table."
"Generate Python code that uses the Apache Airflow provider package apache-airflow-providers-http to create an HTTP connection and trigger an HTTP request to retrieve data from a specified URL."
"Generate Python code that creates a hash table using Cython, assuming that the keys are already pre-hashed before insertion."
"Generate Python code that connects to a Microsoft Azure File Share Storage account, uploads a file to a specific directory within the file share, and retrieves a list of files within that directory."
"Generate Python code that creates a Sphinx project and applies the Read the Docs theme to the documentation, ensuring a consistent and professional look for the project's documentation."
"Generate Python code that imports the Microsoft Azure Namespace Package to access internal functionalities for managing Azure resources securely and efficiently."
"Generate Python code that implements a deep learning model using PyTorch Lightning to train and test the model on a dataset, while automatically handling training loop details and reducing boilerplate code."
"Generate Python code that lists all virtual machines in an Azure subscription using the Microsoft Azure Compute Management Client Library."
"Generate Python code that utilizes the Clang Python Bindings to parse and analyze C/C++ code, extracting information such as function names, variable declarations, and control flow structures."
"Generate Python code that creates a key-value storage system where new key-value pairs can be added and existing ones can be updated without overwriting the previous values."
"Generate Python code that decorates a function with a rate limit, allowing it to make API requests at a specified maximum rate per second, managing and throttling the requests effectively."
"Generate Python code that configures the Django application to include the necessary server headers for Cross-Origin Resource Sharing (CORS) handling."
"Generate Python code that efficiently parses a given ISO8601 date time string using the fast ISO8601 parser written in C."
"Generate Python code that retries sending a GET request using aiohttp client until it succeeds, with a maximum of 3 retries, each with an exponential backoff delay between attempts."
"Generate Python code that takes a JSON object containing JSON Reference objects and automatically resolves and replaces those references with the actual values they point to."
"Generate Python code that defines legacy registered functions to enable backwards compatibility with older versions of spaCy."
"Generate Python code that uses the typing stubs for toml to define the structure of a TOML configuration file and validate its contents against the defined structure."
"Generate Python code that creates a file-based lock to ensure exclusive access to a resource on both Linux and Windows platforms."
"Generate Python code that generates a time-based one-time password (TOTP) using the Python One Time Password Library, and verifies the generated TOTP against a user input for authentication purposes."
"Generate Python code that connects to a Kusto cluster, queries a specific table for data, and then saves the results into a pandas DataFrame for further analysis."
"Generate Python code that takes a user input ISO 8601 date and time string, parses it using the library for ISO 8601 string parsing, and outputs the corresponding date and time components (year, month, day, hour, minute, second) as individual variables for further processing."
"Generate Python code that takes a user agent string as input and uses the Browserscope's user agent parser to extract and display detailed information about the browser, operating system, and device associated with that user agent."
"Generate Python code that logs the processing time of a SpaCy pipeline for document text, including tokenization, parsing, and entity recognition, to a specified log file using the logging utilities provided by the package."
"Generate Python code that implements a static memory-efficient and fast Trie-like structure to efficiently store and search for strings in a large dataset."
"Generate Python code that establishes a connection to the Qdrant vector search engine client library, indexes a set of vectors with associated metadata, and performs a search query based on a specified vector input."
"Generate Python code that formats a given Python script using the formatter package."
"Generate Python code that reads a MaxMind DB format file and extracts location information such as country, region, city, latitude, and longitude for a given IP address."
"Generate Python code that differentiates a given Numpy code, compiles it into optimized machine code, and transforms it into a more efficient form."
"Generate Python code that integrates Django with pytest to run automated tests for a web application built using Django framework."
"Generate Python code that integrates the Application Insights API to track and log user events, exceptions, and performance metrics in a Python application."
"Generate Python code that retrieves a secret from Microsoft Azure Key Vault using the Key Vault Management Client Library."
"Generate Python code that creates a 3-dimensional labeled array using this package and populates it with random data, then prints out the array with labels for each dimension."
"Generate Python code that creates a SageMaker instance, sets up a training job with specified hyperparameters, and deploys the trained model for inference."
"Generate Python code that reads a configuration file in JSON format, stores the configuration values in a dictionary, and allows for easy access to and manipulation of the configuration settings within a Python script using the sweetest config system package."
"Generate Python code that performs similarity search on a collection of dense vectors using the library, returning the most similar vectors to a given query vector."
"Generate Python code that takes a SAM template as input and transforms it into an AWS CloudFormation template using the AWS SAM Translator library."
"Generate Python code that creates a new column in a pandas DataFrame containing the distance between two sets of latitude and longitude coordinates using the geographic pandas extensions package."
"Generate Python code that imports the langcodes module and retrieves supplementary data such as language names, ISO 639-3 codes, and language families based on the provided language codes."
"Generate Python code that defines custom Pydantic types for handling additional data validation and serialization needs beyond the built-in types provided by Pydantic."
"Generate Python code that demonstrates the usage of the dataclasses module for Python 3.6 by defining a simple class with dataclass decorator and initializing its attributes."
"Generate Python code that demonstrates how to use the pytest plugin to add and access custom environment variables during test execution."
"Generate Python code that creates a Kiota-generated library with core abstractions for handling HTTP requests and responses, enabling seamless communication with RESTful APIs."
"Generate Python code that loads a trained TensorFlow model and deploys it using TensorFlow Serving API to serve real-time predictions on incoming data."
"Generate Python code that creates type hints for functions and classes in a Python script that uses pyOpenSSL for SSL/TLS communication."
"Generate Python code that calculates the edit distance between two given strings and outputs the similarity score based on the computed distance."
"Generate Python code that utilizes the Microsoft Azure Authorization Management Client Library to create a new role assignment for a specific user, with the specified role, in a given Azure subscription."
"Generate Python code that creates a new Azure Synapse artifact, such as a notebook or data flow, within a specified Synapse workspace using the Microsoft Azure Synapse Artifacts Client Library."
"Generate Python code that analyzes a Terraform configuration file to identify any security vulnerabilities or best practice violations in the infrastructure setup."
"Generate Python code that signs a JSON Web Token (JWT) using the JSON Object Signing and Encryption (JOSE) Web standards."
"Generate Python code that creates a backend server for a CMake based project, allowing for seamless integration and management of build processes and configurations."
"Generate Python code that establishes a connection to a GraphQL server, sends a query requesting specific data, and parses the response to extract and display the relevant information."
"Generate Python code that converts an AWS CloudFormation template from JSON format to YAML format."
"Generate Python code that uses the Pythonic bindings for FFmpeg's libraries to extract frames from a video file and save them as individual image files."
"Generate Python code that creates a command line interface for a script that allows users to input parameters and execute specific functions based on those inputs."
"Generate Python code that creates an immutable dictionary wrapper using the package, preventing any modifications to the dictionary's key-value pairs after instantiation."
"Generate Python code that utilizes the Google AI Generative Language API client library to generate creative and human-like text based on a given prompt."
"Generate Python code that creates reusable and dynamic test fixtures for unit tests, mimicking the behavior of thoughtbot's factory_bot in Ruby."
"Generate Python code that utilizes the IPython-enabled pdb package to set breakpoints, debug code interactively, and leverage IPython's enhanced features for a more user-friendly debugging experience."
"Generate Python code that connects to a Trino distributed SQL Engine server, submits a query to retrieve data from a specific table, and prints the results to the console."
"Generate Python code that calculates the accuracy, precision, recall, and F1 score for a PyTorch model's predictions on a given dataset using the PyTorch native Metrics package."
"Generate Python code that uses the paramiko package to establish an SSH connection to a remote server, execute a command, and retrieve the output."
"Generate Python code that creates a CloudEvent object with specified attributes such as event type, source, and data payload, and then serializes it into a JSON representation for easy transmission and processing within a CloudEvents ecosystem."
"Generate Python code that creates a new Azure Data Factory pipeline, sets up copy activities to move data between Azure services, and deploys the pipeline for automated data processing."
"Generate Python code that defines type hints for asynchronous file operations using the aiofiles package."
"Generate Python code that parses a text file containing data into a RAG-Optimized format, extracting relevant information and organizing it according to the RAG (Red, Amber, Green) system for easy analysis and visualization."
"Generate Python code that sends an HTTP GET request to a server with NTLM authentication using the requests library, ensuring successful authentication and receiving the response from the server."
"Generate Python code that establishes a connection to an AMQP (Advanced Message Queuing Protocol) server using the Pika Python AMQP Client Library and publishes a message to a specific exchange with a given routing key."
"Generate Python code that utilizes the nose package to run unit tests for a Python project, providing easy-to-use functionality for testing and generating detailed reports on test results."
"Generate Python code that extracts telemetry data from a Python application and exports it to Microsoft Azure Monitor using the Opentelemetry Exporter Client Library."
"Generate Python code that utilizes core abstractions from the kiota generated libraries to create and interact with RESTful API endpoints for a web application."
"Generate Python code that analyzes a given Python script for potential security vulnerabilities and provides a report highlighting any insecure coding practices or potential threats."
"Generate Python code that creates a Markdown file containing detailed documentation for a Python project, including descriptions of classes, functions, and methods, as well as any necessary instructions or examples."
"Generate Python code that sorts a list of strings containing both numbers and letters in a natural sorting order, where numbers are sorted numerically and letters are sorted alphabetically, using the natural sorting functionality provided by the package."
"Generate Python code that utilizes the c-ares library to perform asynchronous DNS resolution for a list of domain names and returns the corresponding IP addresses."
"Generate Python code that reads a JUnit or xUnit Result XML file, extracts information about test cases and their status (passed/failed/skipped), and then generates a summary report with statistics such as total number of tests, number of passed tests, number of failed tests, and success rate."
"Generate Python code that asynchronously resolves the IP address of a given domain name using the asyncio-based DNS resolver provided in the package."
"Generate Python code that retrieves the ISO 3166-1 country code and name for a specific country by inputting its name or code."
"Generate Python code that migrates existing code using the deprecated asyncio backport to the standard library asyncio package."
"Generate Python code that randomizes the order in which pytest tests are run while allowing the user to specify a seed for the randomness to ensure reproducibility of test results."
"Generate Python code that creates a stateful, multi-actor application using the provided LLMs package, incorporating features such as actor encapsulation, message passing, and state management."
"Generate Python code that uses TensorFlow IO to load an audio file, extract its spectrogram features using a signal processing function, and then feed these features into a TensorFlow model for audio classification."
"Generate Python code that establishes a connection to Microsoft Azure Synapse Spark service and executes a Spark job to ingest data from Azure Blob Storage and perform data processing operations such as transformation and aggregation."
"Generate Python code that creates a new Python project directory structure with a standardized layout, including folders for source code, tests, documentation, and configuration files, leveraging the features of the modern and extensible project management tools provided by this package."
"Generate Python code that demonstrates how to use the enhanced functionalities of the contextlib module to create a custom context manager for handling file operations with automatic closing and error handling."
"Generate Python code that utilizes the Google Generative AI High level API client library to generate a text-based description of an image using advanced generative models."
"Generate Python code that defines typing stubs for the Deprecated package, including annotations for deprecated functions, classes, and modules."
"Generate Python code that creates a command-line application using the framework provided, including a parser for user input that is user-friendly yet offers a wide range of features for developers to utilize."
"Generate Python code that creates type hints using the cffi library for calling C functions in Python."
"Generate Python code that transforms a nested data structure into a formatted output using declarative rules and object transformations."
"Generate Python code that uses the package to execute a system command and capture its output in real-time, while also handling any errors or exceptions that may occur during the process."
"Generate Python code that tracks user events in a Django web application and sends them to Snowplow for analytics purposes."
"Generate Python code that performs a wavelet transform on a given signal using PyWavelets package and displays the resulting coefficients."
"Generate Python code that automates the process of incrementing and updating version numbers in your Python projects using the versioning library."
"Generate Python code that deploys and manages a FastAPI Cloud app from the command line, including functions to create, update, and delete app configurations with ease."
"Generate Python code that converts a JUnit XML test result document into a format that can be easily read and interpreted by Jenkins for continuous integration purposes."
"Generate Python code that creates a SQLAlchemy model class and a corresponding marshmallow schema class for serializing and deserializing data."
"Generate Python code that loads an audio file, applies a low-pass filter to it, increases the volume by 20%, and then saves the modified audio as a new file."
"Generate Python code that parses a YAML file containing custom environment variable tags and substitutes them with the corresponding values from the system environment variables."
"Generate Python code that automates the process of copying all documentation files from the main branch to the gh-pages branch of a GitHub repository, ensuring that the latest documentation is always available on the project's GitHub Pages."
"Generate Python code that utilizes the lightweight static analysis tool to identify bug variants in a given Python codebase by searching for patterns resembling source code."
"Generate Python code that utilizes the XLA library for JAX to optimize and compile computational graphs for accelerated execution on supported hardware devices."
"Generate Python code that sends a count metric to a statsd server using this simple statsd client package."
"Generate Python code that retrieves the geographic information of an IP address using the MaxMind GeoIP2 API and prints out the country, city, latitude, and longitude of the specified IP address."
"Generate Python code that manipulates network addresses to calculate the subnet mask and broadcast address for a given IP address and subnet prefix length."
"Generate Python code that utilizes the Pytest plugin to split a test suite into equally sized sub suites based on the execution time of each test."
"Generate Python code that utilizes the utility functions from this package to manipulate lists of data in a functional programming style similar to Lo-Dash in Javascript."
"Generate Python code that connects to the Azure Monitor service and runs a query to retrieve monitoring data such as metrics, logs, and traces for a specified resource in a specified time range."
"Generate Python code that uses cryptographic modules to encrypt a string using AES encryption with a specified key and initialization vector."
"Generate Python code that creates a RESTful API using Connexion that follows the OpenAPI/Swagger specification to define endpoints, request/response schemas, and operation parameters."
"Generate Python code that utilizes the type annotations from the boto3 RDS 1.40.3 service, enabling static type checking and inference using mypy."
"Generate Python code that opens a serial port connection and reads incoming data from a specified serial port using the Python Serial Port Extension package."
"Generate Python code that implements a convolutional neural network using the reference implementations provided for popular deep learning models."
"Generate Python code that uses the package's automation capabilities to schedule and execute routine IT tasks such as system updates, backups, and server monitoring with minimal code complexity."
"Generate Python code that validates a given string to ensure it conforms to the syntax rules defined in RFC 3987 for Internationalized Resource Identifiers (IRIs)."
"Generate Python code that loads a pre-trained ResNet model from PyTorch Image Models and fine-tunes it on a custom image dataset for classification tasks."
"Generate Python code that retrieves Azure Monitor metrics data for a specified resource group and time range, and then displays the results in a formatted manner."
"Generate Python code that sends an SMS message using the Twilio API client and includes TwiML to generate an automated response when receiving a text message."
"Generate Python code that sends a message to a Slack channel using Apache Airflow with the apache-airflow-providers-slack package."
"Generate Python code that connects to a Redis server using the hiredis wrapper and sets a key-value pair in a specified Redis database."
